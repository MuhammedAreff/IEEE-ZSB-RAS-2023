
newkeypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003626  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00003626  0000369a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000024b4  00000000  00000000  000036e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c00  00000000  00000000  00005b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006794  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000068d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000868d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009578  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a715  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000aee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <main>
      7a:	0c 94 11 1b 	jmp	0x3622	; 0x3622 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e8       	ldi	r26, 0x8E	; 142
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e8       	ldi	r24, 0x8E	; 142
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 06 1b 	jmp	0x360c	; 0x360c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_voidSendCommand>:
#include "CLCL_interface.h"
#include "util/delay.h"


void CLCD_voidSendCommand( u8 CLCD_u8Command)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2f 97       	sbiw	r28, 0x0f	; 15
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8f 87       	std	Y+15, r24	; 0x0f
	/*set Rs=>0*/
	DIO_voidSetPinVal(DIO_PORTC,DIO_PIN_VAL_LOW,DIO_PIN0);
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
	/*set RW=>0*/
	DIO_voidSetPinVal(DIO_PORTC,DIO_PIN_VAL_LOW,DIO_PIN1);
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	41 e0       	ldi	r20, 0x01	; 1
     b5c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
	/*send command */
	DIO_voidSetPortVal(DIO_PORTD,CLCD_u8Command);
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	6f 85       	ldd	r22, Y+15	; 0x0f
     b64:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_voidSetPortVal>
	DIO_voidSetPinVal(DIO_PORTC,DIO_PIN_VAL_HIGH,DIO_PIN2);
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	61 e0       	ldi	r22, 0x01	; 1
     b6c:	42 e0       	ldi	r20, 0x02	; 2
     b6e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e8       	ldi	r26, 0x80	; 128
     b78:	bf e3       	ldi	r27, 0x3F	; 63
     b7a:	8b 87       	std	Y+11, r24	; 0x0b
     b7c:	9c 87       	std	Y+12, r25	; 0x0c
     b7e:	ad 87       	std	Y+13, r26	; 0x0d
     b80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b82:	6b 85       	ldd	r22, Y+11	; 0x0b
     b84:	7c 85       	ldd	r23, Y+12	; 0x0c
     b86:	8d 85       	ldd	r24, Y+13	; 0x0d
     b88:	9e 85       	ldd	r25, Y+14	; 0x0e
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	8f 83       	std	Y+7, r24	; 0x07
     b9c:	98 87       	std	Y+8, r25	; 0x08
     b9e:	a9 87       	std	Y+9, r26	; 0x09
     ba0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba2:	6f 81       	ldd	r22, Y+7	; 0x07
     ba4:	78 85       	ldd	r23, Y+8	; 0x08
     ba6:	89 85       	ldd	r24, Y+9	; 0x09
     ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e8       	ldi	r20, 0x80	; 128
     bb0:	5f e3       	ldi	r21, 0x3F	; 63
     bb2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bb6:	88 23       	and	r24, r24
     bb8:	2c f4       	brge	.+10     	; 0xbc4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	9e 83       	std	Y+6, r25	; 0x06
     bc0:	8d 83       	std	Y+5, r24	; 0x05
     bc2:	3f c0       	rjmp	.+126    	; 0xc42 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bc4:	6f 81       	ldd	r22, Y+7	; 0x07
     bc6:	78 85       	ldd	r23, Y+8	; 0x08
     bc8:	89 85       	ldd	r24, Y+9	; 0x09
     bca:	9a 85       	ldd	r25, Y+10	; 0x0a
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	3f ef       	ldi	r19, 0xFF	; 255
     bd0:	4f e7       	ldi	r20, 0x7F	; 127
     bd2:	57 e4       	ldi	r21, 0x47	; 71
     bd4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd8:	18 16       	cp	r1, r24
     bda:	4c f5       	brge	.+82     	; 0xc2e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bde:	7c 85       	ldd	r23, Y+12	; 0x0c
     be0:	8d 85       	ldd	r24, Y+13	; 0x0d
     be2:	9e 85       	ldd	r25, Y+14	; 0x0e
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9e 83       	std	Y+6, r25	; 0x06
     c02:	8d 83       	std	Y+5, r24	; 0x05
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <CLCD_voidSendCommand+0xee>
     c06:	88 ec       	ldi	r24, 0xC8	; 200
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <CLCD_voidSendCommand+0xdc>
     c16:	9c 83       	std	Y+4, r25	; 0x04
     c18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8d 81       	ldd	r24, Y+5	; 0x05
     c1c:	9e 81       	ldd	r25, Y+6	; 0x06
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8d 81       	ldd	r24, Y+5	; 0x05
     c26:	9e 81       	ldd	r25, Y+6	; 0x06
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <CLCD_voidSendCommand+0xd0>
     c2c:	14 c0       	rjmp	.+40     	; 0xc56 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	6f 81       	ldd	r22, Y+7	; 0x07
     c30:	78 85       	ldd	r23, Y+8	; 0x08
     c32:	89 85       	ldd	r24, Y+9	; 0x09
     c34:	9a 85       	ldd	r25, Y+10	; 0x0a
     c36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	8d 83       	std	Y+5, r24	; 0x05
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <CLCD_voidSendCommand+0x118>
     c52:	9a 83       	std	Y+2, r25	; 0x02
     c54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinVal(DIO_PORTC,DIO_PIN_VAL_LOW,DIO_PIN2);
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	42 e0       	ldi	r20, 0x02	; 2
     c5c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>




}
     c60:	2f 96       	adiw	r28, 0x0f	; 15
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	08 95       	ret

00000c72 <CLCD_voidSendData>:
void CLCD_voidSendData( u8 CLCD_u8Data)
{
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	cd b7       	in	r28, 0x3d	; 61
     c78:	de b7       	in	r29, 0x3e	; 62
     c7a:	2f 97       	sbiw	r28, 0x0f	; 15
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	8f 87       	std	Y+15, r24	; 0x0f
	/*set Rs=>0*/
	DIO_voidSetPinVal(DIO_PORTC,DIO_PIN_VAL_HIGH,DIO_PIN0);
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
	/*set RW=>0*/
	DIO_voidSetPinVal(DIO_PORTC,DIO_PIN_VAL_LOW,DIO_PIN1);
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
	/*send command */
	DIO_voidSetPortVal(DIO_PORTD,CLCD_u8Data);
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	6f 85       	ldd	r22, Y+15	; 0x0f
     ca0:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_voidSetPortVal>
	DIO_voidSetPinVal(DIO_PORTC,DIO_PIN_VAL_HIGH,DIO_PIN2);
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	42 e0       	ldi	r20, 0x02	; 2
     caa:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e8       	ldi	r26, 0x80	; 128
     cb4:	bf e3       	ldi	r27, 0x3F	; 63
     cb6:	8b 87       	std	Y+11, r24	; 0x0b
     cb8:	9c 87       	std	Y+12, r25	; 0x0c
     cba:	ad 87       	std	Y+13, r26	; 0x0d
     cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a ef       	ldi	r20, 0xFA	; 250
     ccc:	54 e4       	ldi	r21, 0x44	; 68
     cce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	8f 83       	std	Y+7, r24	; 0x07
     cd8:	98 87       	std	Y+8, r25	; 0x08
     cda:	a9 87       	std	Y+9, r26	; 0x09
     cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9e 83       	std	Y+6, r25	; 0x06
     cfc:	8d 83       	std	Y+5, r24	; 0x05
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d00:	6f 81       	ldd	r22, Y+7	; 0x07
     d02:	78 85       	ldd	r23, Y+8	; 0x08
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	9a 85       	ldd	r25, Y+10	; 0x0a
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d14:	18 16       	cp	r1, r24
     d16:	4c f5       	brge	.+82     	; 0xd6a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d18:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <CLCD_voidSendData+0xee>
     d42:	88 ec       	ldi	r24, 0xC8	; 200
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <CLCD_voidSendData+0xdc>
     d52:	9c 83       	std	Y+4, r25	; 0x04
     d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	69 f7       	brne	.-38     	; 0xd42 <CLCD_voidSendData+0xd0>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6a:	6f 81       	ldd	r22, Y+7	; 0x07
     d6c:	78 85       	ldd	r23, Y+8	; 0x08
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	9a 85       	ldd	r25, Y+10	; 0x0a
     d72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <CLCD_voidSendData+0x118>
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinVal(DIO_PORTC,DIO_PIN_VAL_LOW,DIO_PIN2);
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	42 e0       	ldi	r20, 0x02	; 2
     d98:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>


}
     d9c:	2f 96       	adiw	r28, 0x0f	; 15
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <CLCD_voidInit>:
void CLCD_voidInit(void)
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	e8 97       	sbiw	r28, 0x38	; 56
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDir(DIO_PORTD,DIO_PORT_OUT);
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	6f ef       	ldi	r22, 0xFF	; 255
     dc6:	0e 94 84 0b 	call	0x1708	; 0x1708 <DIO_voidSetPortDir>
	DIO_voidSetPinDir(DIO_PORTC,DIO_PIN_DIR_OUT,DIO_PIN0);
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	0e 94 06 0c 	call	0x180c	; 0x180c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_PORTC,DIO_PIN_DIR_OUT,DIO_PIN1);
     dd4:	82 e0       	ldi	r24, 0x02	; 2
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	41 e0       	ldi	r20, 0x01	; 1
     dda:	0e 94 06 0c 	call	0x180c	; 0x180c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DIO_PORTC,DIO_PIN_DIR_OUT,DIO_PIN2);
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	42 e0       	ldi	r20, 0x02	; 2
     de4:	0e 94 06 0c 	call	0x180c	; 0x180c <DIO_voidSetPinDir>
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	a0 e2       	ldi	r26, 0x20	; 32
     dee:	b2 e4       	ldi	r27, 0x42	; 66
     df0:	8d ab       	std	Y+53, r24	; 0x35
     df2:	9e ab       	std	Y+54, r25	; 0x36
     df4:	af ab       	std	Y+55, r26	; 0x37
     df6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df8:	6d a9       	ldd	r22, Y+53	; 0x35
     dfa:	7e a9       	ldd	r23, Y+54	; 0x36
     dfc:	8f a9       	ldd	r24, Y+55	; 0x37
     dfe:	98 ad       	ldd	r25, Y+56	; 0x38
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	4a ef       	ldi	r20, 0xFA	; 250
     e06:	54 e4       	ldi	r21, 0x44	; 68
     e08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	89 ab       	std	Y+49, r24	; 0x31
     e12:	9a ab       	std	Y+50, r25	; 0x32
     e14:	ab ab       	std	Y+51, r26	; 0x33
     e16:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e18:	69 a9       	ldd	r22, Y+49	; 0x31
     e1a:	7a a9       	ldd	r23, Y+50	; 0x32
     e1c:	8b a9       	ldd	r24, Y+51	; 0x33
     e1e:	9c a9       	ldd	r25, Y+52	; 0x34
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e8       	ldi	r20, 0x80	; 128
     e26:	5f e3       	ldi	r21, 0x3F	; 63
     e28:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e2c:	88 23       	and	r24, r24
     e2e:	2c f4       	brge	.+10     	; 0xe3a <CLCD_voidInit+0x8c>
		__ticks = 1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	98 ab       	std	Y+48, r25	; 0x30
     e36:	8f a7       	std	Y+47, r24	; 0x2f
     e38:	3f c0       	rjmp	.+126    	; 0xeb8 <CLCD_voidInit+0x10a>
	else if (__tmp > 65535)
     e3a:	69 a9       	ldd	r22, Y+49	; 0x31
     e3c:	7a a9       	ldd	r23, Y+50	; 0x32
     e3e:	8b a9       	ldd	r24, Y+51	; 0x33
     e40:	9c a9       	ldd	r25, Y+52	; 0x34
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	3f ef       	ldi	r19, 0xFF	; 255
     e46:	4f e7       	ldi	r20, 0x7F	; 127
     e48:	57 e4       	ldi	r21, 0x47	; 71
     e4a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e4e:	18 16       	cp	r1, r24
     e50:	4c f5       	brge	.+82     	; 0xea4 <CLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e52:	6d a9       	ldd	r22, Y+53	; 0x35
     e54:	7e a9       	ldd	r23, Y+54	; 0x36
     e56:	8f a9       	ldd	r24, Y+55	; 0x37
     e58:	98 ad       	ldd	r25, Y+56	; 0x38
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e2       	ldi	r20, 0x20	; 32
     e60:	51 e4       	ldi	r21, 0x41	; 65
     e62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	bc 01       	movw	r22, r24
     e6c:	cd 01       	movw	r24, r26
     e6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	98 ab       	std	Y+48, r25	; 0x30
     e78:	8f a7       	std	Y+47, r24	; 0x2f
     e7a:	0f c0       	rjmp	.+30     	; 0xe9a <CLCD_voidInit+0xec>
     e7c:	88 ec       	ldi	r24, 0xC8	; 200
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9e a7       	std	Y+46, r25	; 0x2e
     e82:	8d a7       	std	Y+45, r24	; 0x2d
     e84:	8d a5       	ldd	r24, Y+45	; 0x2d
     e86:	9e a5       	ldd	r25, Y+46	; 0x2e
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <CLCD_voidInit+0xda>
     e8c:	9e a7       	std	Y+46, r25	; 0x2e
     e8e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e90:	8f a5       	ldd	r24, Y+47	; 0x2f
     e92:	98 a9       	ldd	r25, Y+48	; 0x30
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	98 ab       	std	Y+48, r25	; 0x30
     e98:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e9c:	98 a9       	ldd	r25, Y+48	; 0x30
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	69 f7       	brne	.-38     	; 0xe7c <CLCD_voidInit+0xce>
     ea2:	14 c0       	rjmp	.+40     	; 0xecc <CLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea4:	69 a9       	ldd	r22, Y+49	; 0x31
     ea6:	7a a9       	ldd	r23, Y+50	; 0x32
     ea8:	8b a9       	ldd	r24, Y+51	; 0x33
     eaa:	9c a9       	ldd	r25, Y+52	; 0x34
     eac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	98 ab       	std	Y+48, r25	; 0x30
     eb6:	8f a7       	std	Y+47, r24	; 0x2f
     eb8:	8f a5       	ldd	r24, Y+47	; 0x2f
     eba:	98 a9       	ldd	r25, Y+48	; 0x30
     ebc:	9c a7       	std	Y+44, r25	; 0x2c
     ebe:	8b a7       	std	Y+43, r24	; 0x2b
     ec0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ec2:	9c a5       	ldd	r25, Y+44	; 0x2c
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <CLCD_voidInit+0x116>
     ec8:	9c a7       	std	Y+44, r25	; 0x2c
     eca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	CLCD_voidSendCommand(0b00111000);
     ecc:	88 e3       	ldi	r24, 0x38	; 56
     ece:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	a0 e8       	ldi	r26, 0x80	; 128
     ed8:	bf e3       	ldi	r27, 0x3F	; 63
     eda:	8f a3       	std	Y+39, r24	; 0x27
     edc:	98 a7       	std	Y+40, r25	; 0x28
     ede:	a9 a7       	std	Y+41, r26	; 0x29
     ee0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee2:	6f a1       	ldd	r22, Y+39	; 0x27
     ee4:	78 a5       	ldd	r23, Y+40	; 0x28
     ee6:	89 a5       	ldd	r24, Y+41	; 0x29
     ee8:	9a a5       	ldd	r25, Y+42	; 0x2a
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	4a ef       	ldi	r20, 0xFA	; 250
     ef0:	54 e4       	ldi	r21, 0x44	; 68
     ef2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	8b a3       	std	Y+35, r24	; 0x23
     efc:	9c a3       	std	Y+36, r25	; 0x24
     efe:	ad a3       	std	Y+37, r26	; 0x25
     f00:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f02:	6b a1       	ldd	r22, Y+35	; 0x23
     f04:	7c a1       	ldd	r23, Y+36	; 0x24
     f06:	8d a1       	ldd	r24, Y+37	; 0x25
     f08:	9e a1       	ldd	r25, Y+38	; 0x26
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e8       	ldi	r20, 0x80	; 128
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f16:	88 23       	and	r24, r24
     f18:	2c f4       	brge	.+10     	; 0xf24 <CLCD_voidInit+0x176>
		__ticks = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9a a3       	std	Y+34, r25	; 0x22
     f20:	89 a3       	std	Y+33, r24	; 0x21
     f22:	3f c0       	rjmp	.+126    	; 0xfa2 <CLCD_voidInit+0x1f4>
	else if (__tmp > 65535)
     f24:	6b a1       	ldd	r22, Y+35	; 0x23
     f26:	7c a1       	ldd	r23, Y+36	; 0x24
     f28:	8d a1       	ldd	r24, Y+37	; 0x25
     f2a:	9e a1       	ldd	r25, Y+38	; 0x26
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	3f ef       	ldi	r19, 0xFF	; 255
     f30:	4f e7       	ldi	r20, 0x7F	; 127
     f32:	57 e4       	ldi	r21, 0x47	; 71
     f34:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f38:	18 16       	cp	r1, r24
     f3a:	4c f5       	brge	.+82     	; 0xf8e <CLCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3c:	6f a1       	ldd	r22, Y+39	; 0x27
     f3e:	78 a5       	ldd	r23, Y+40	; 0x28
     f40:	89 a5       	ldd	r24, Y+41	; 0x29
     f42:	9a a5       	ldd	r25, Y+42	; 0x2a
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9a a3       	std	Y+34, r25	; 0x22
     f62:	89 a3       	std	Y+33, r24	; 0x21
     f64:	0f c0       	rjmp	.+30     	; 0xf84 <CLCD_voidInit+0x1d6>
     f66:	88 ec       	ldi	r24, 0xC8	; 200
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	98 a3       	std	Y+32, r25	; 0x20
     f6c:	8f 8f       	std	Y+31, r24	; 0x1f
     f6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f70:	98 a1       	ldd	r25, Y+32	; 0x20
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <CLCD_voidInit+0x1c4>
     f76:	98 a3       	std	Y+32, r25	; 0x20
     f78:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7a:	89 a1       	ldd	r24, Y+33	; 0x21
     f7c:	9a a1       	ldd	r25, Y+34	; 0x22
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	9a a3       	std	Y+34, r25	; 0x22
     f82:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	89 a1       	ldd	r24, Y+33	; 0x21
     f86:	9a a1       	ldd	r25, Y+34	; 0x22
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	69 f7       	brne	.-38     	; 0xf66 <CLCD_voidInit+0x1b8>
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <CLCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8e:	6b a1       	ldd	r22, Y+35	; 0x23
     f90:	7c a1       	ldd	r23, Y+36	; 0x24
     f92:	8d a1       	ldd	r24, Y+37	; 0x25
     f94:	9e a1       	ldd	r25, Y+38	; 0x26
     f96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9a a3       	std	Y+34, r25	; 0x22
     fa0:	89 a3       	std	Y+33, r24	; 0x21
     fa2:	89 a1       	ldd	r24, Y+33	; 0x21
     fa4:	9a a1       	ldd	r25, Y+34	; 0x22
     fa6:	9e 8f       	std	Y+30, r25	; 0x1e
     fa8:	8d 8f       	std	Y+29, r24	; 0x1d
     faa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fac:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <CLCD_voidInit+0x200>
     fb2:	9e 8f       	std	Y+30, r25	; 0x1e
     fb4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b00001100);
     fb6:	8c e0       	ldi	r24, 0x0C	; 12
     fb8:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	a0 e8       	ldi	r26, 0x80	; 128
     fc2:	bf e3       	ldi	r27, 0x3F	; 63
     fc4:	89 8f       	std	Y+25, r24	; 0x19
     fc6:	9a 8f       	std	Y+26, r25	; 0x1a
     fc8:	ab 8f       	std	Y+27, r26	; 0x1b
     fca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fcc:	69 8d       	ldd	r22, Y+25	; 0x19
     fce:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	4a ef       	ldi	r20, 0xFA	; 250
     fda:	54 e4       	ldi	r21, 0x44	; 68
     fdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	8d 8b       	std	Y+21, r24	; 0x15
     fe6:	9e 8b       	std	Y+22, r25	; 0x16
     fe8:	af 8b       	std	Y+23, r26	; 0x17
     fea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fec:	6d 89       	ldd	r22, Y+21	; 0x15
     fee:	7e 89       	ldd	r23, Y+22	; 0x16
     ff0:	8f 89       	ldd	r24, Y+23	; 0x17
     ff2:	98 8d       	ldd	r25, Y+24	; 0x18
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e8       	ldi	r20, 0x80	; 128
     ffa:	5f e3       	ldi	r21, 0x3F	; 63
     ffc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1000:	88 23       	and	r24, r24
    1002:	2c f4       	brge	.+10     	; 0x100e <CLCD_voidInit+0x260>
		__ticks = 1;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	9c 8b       	std	Y+20, r25	; 0x14
    100a:	8b 8b       	std	Y+19, r24	; 0x13
    100c:	3f c0       	rjmp	.+126    	; 0x108c <CLCD_voidInit+0x2de>
	else if (__tmp > 65535)
    100e:	6d 89       	ldd	r22, Y+21	; 0x15
    1010:	7e 89       	ldd	r23, Y+22	; 0x16
    1012:	8f 89       	ldd	r24, Y+23	; 0x17
    1014:	98 8d       	ldd	r25, Y+24	; 0x18
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	3f ef       	ldi	r19, 0xFF	; 255
    101a:	4f e7       	ldi	r20, 0x7F	; 127
    101c:	57 e4       	ldi	r21, 0x47	; 71
    101e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1022:	18 16       	cp	r1, r24
    1024:	4c f5       	brge	.+82     	; 0x1078 <CLCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1026:	69 8d       	ldd	r22, Y+25	; 0x19
    1028:	7a 8d       	ldd	r23, Y+26	; 0x1a
    102a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    102c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	40 e2       	ldi	r20, 0x20	; 32
    1034:	51 e4       	ldi	r21, 0x41	; 65
    1036:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	bc 01       	movw	r22, r24
    1040:	cd 01       	movw	r24, r26
    1042:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	9c 8b       	std	Y+20, r25	; 0x14
    104c:	8b 8b       	std	Y+19, r24	; 0x13
    104e:	0f c0       	rjmp	.+30     	; 0x106e <CLCD_voidInit+0x2c0>
    1050:	88 ec       	ldi	r24, 0xC8	; 200
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9a 8b       	std	Y+18, r25	; 0x12
    1056:	89 8b       	std	Y+17, r24	; 0x11
    1058:	89 89       	ldd	r24, Y+17	; 0x11
    105a:	9a 89       	ldd	r25, Y+18	; 0x12
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <CLCD_voidInit+0x2ae>
    1060:	9a 8b       	std	Y+18, r25	; 0x12
    1062:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1064:	8b 89       	ldd	r24, Y+19	; 0x13
    1066:	9c 89       	ldd	r25, Y+20	; 0x14
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	9c 8b       	std	Y+20, r25	; 0x14
    106c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106e:	8b 89       	ldd	r24, Y+19	; 0x13
    1070:	9c 89       	ldd	r25, Y+20	; 0x14
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	69 f7       	brne	.-38     	; 0x1050 <CLCD_voidInit+0x2a2>
    1076:	14 c0       	rjmp	.+40     	; 0x10a0 <CLCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1078:	6d 89       	ldd	r22, Y+21	; 0x15
    107a:	7e 89       	ldd	r23, Y+22	; 0x16
    107c:	8f 89       	ldd	r24, Y+23	; 0x17
    107e:	98 8d       	ldd	r25, Y+24	; 0x18
    1080:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	9c 8b       	std	Y+20, r25	; 0x14
    108a:	8b 8b       	std	Y+19, r24	; 0x13
    108c:	8b 89       	ldd	r24, Y+19	; 0x13
    108e:	9c 89       	ldd	r25, Y+20	; 0x14
    1090:	98 8b       	std	Y+16, r25	; 0x10
    1092:	8f 87       	std	Y+15, r24	; 0x0f
    1094:	8f 85       	ldd	r24, Y+15	; 0x0f
    1096:	98 89       	ldd	r25, Y+16	; 0x10
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	f1 f7       	brne	.-4      	; 0x1098 <CLCD_voidInit+0x2ea>
    109c:	98 8b       	std	Y+16, r25	; 0x10
    109e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(0b00000001);
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	b0 e4       	ldi	r27, 0x40	; 64
    10ae:	8b 87       	std	Y+11, r24	; 0x0b
    10b0:	9c 87       	std	Y+12, r25	; 0x0c
    10b2:	ad 87       	std	Y+13, r26	; 0x0d
    10b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    10bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	4a ef       	ldi	r20, 0xFA	; 250
    10c4:	54 e4       	ldi	r21, 0x44	; 68
    10c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	8f 83       	std	Y+7, r24	; 0x07
    10d0:	98 87       	std	Y+8, r25	; 0x08
    10d2:	a9 87       	std	Y+9, r26	; 0x09
    10d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10d6:	6f 81       	ldd	r22, Y+7	; 0x07
    10d8:	78 85       	ldd	r23, Y+8	; 0x08
    10da:	89 85       	ldd	r24, Y+9	; 0x09
    10dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e8       	ldi	r20, 0x80	; 128
    10e4:	5f e3       	ldi	r21, 0x3F	; 63
    10e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10ea:	88 23       	and	r24, r24
    10ec:	2c f4       	brge	.+10     	; 0x10f8 <CLCD_voidInit+0x34a>
		__ticks = 1;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9e 83       	std	Y+6, r25	; 0x06
    10f4:	8d 83       	std	Y+5, r24	; 0x05
    10f6:	3f c0       	rjmp	.+126    	; 0x1176 <CLCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    10f8:	6f 81       	ldd	r22, Y+7	; 0x07
    10fa:	78 85       	ldd	r23, Y+8	; 0x08
    10fc:	89 85       	ldd	r24, Y+9	; 0x09
    10fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	3f ef       	ldi	r19, 0xFF	; 255
    1104:	4f e7       	ldi	r20, 0x7F	; 127
    1106:	57 e4       	ldi	r21, 0x47	; 71
    1108:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    110c:	18 16       	cp	r1, r24
    110e:	4c f5       	brge	.+82     	; 0x1162 <CLCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1110:	6b 85       	ldd	r22, Y+11	; 0x0b
    1112:	7c 85       	ldd	r23, Y+12	; 0x0c
    1114:	8d 85       	ldd	r24, Y+13	; 0x0d
    1116:	9e 85       	ldd	r25, Y+14	; 0x0e
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e2       	ldi	r20, 0x20	; 32
    111e:	51 e4       	ldi	r21, 0x41	; 65
    1120:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	bc 01       	movw	r22, r24
    112a:	cd 01       	movw	r24, r26
    112c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	9e 83       	std	Y+6, r25	; 0x06
    1136:	8d 83       	std	Y+5, r24	; 0x05
    1138:	0f c0       	rjmp	.+30     	; 0x1158 <CLCD_voidInit+0x3aa>
    113a:	88 ec       	ldi	r24, 0xC8	; 200
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	9c 83       	std	Y+4, r25	; 0x04
    1140:	8b 83       	std	Y+3, r24	; 0x03
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	f1 f7       	brne	.-4      	; 0x1146 <CLCD_voidInit+0x398>
    114a:	9c 83       	std	Y+4, r25	; 0x04
    114c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    114e:	8d 81       	ldd	r24, Y+5	; 0x05
    1150:	9e 81       	ldd	r25, Y+6	; 0x06
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	00 97       	sbiw	r24, 0x00	; 0
    115e:	69 f7       	brne	.-38     	; 0x113a <CLCD_voidInit+0x38c>
    1160:	14 c0       	rjmp	.+40     	; 0x118a <CLCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1162:	6f 81       	ldd	r22, Y+7	; 0x07
    1164:	78 85       	ldd	r23, Y+8	; 0x08
    1166:	89 85       	ldd	r24, Y+9	; 0x09
    1168:	9a 85       	ldd	r25, Y+10	; 0x0a
    116a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	9e 83       	std	Y+6, r25	; 0x06
    1174:	8d 83       	std	Y+5, r24	; 0x05
    1176:	8d 81       	ldd	r24, Y+5	; 0x05
    1178:	9e 81       	ldd	r25, Y+6	; 0x06
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	f1 f7       	brne	.-4      	; 0x1182 <CLCD_voidInit+0x3d4>
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    118a:	e8 96       	adiw	r28, 0x38	; 56
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <CLCD_voidSendString>:
void CLCD_voidSendString(u8 * pvString)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <CLCD_voidSendString+0x6>
    11a2:	0f 92       	push	r0
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	9b 83       	std	Y+3, r25	; 0x03
    11aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    11ac:	19 82       	std	Y+1, r1	; 0x01
    11ae:	0e c0       	rjmp	.+28     	; 0x11cc <CLCD_voidSendString+0x30>
	while(pvString[i]!='\0')
	{
		CLCD_voidSendData(pvString[i]);
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ba:	fc 01       	movw	r30, r24
    11bc:	e2 0f       	add	r30, r18
    11be:	f3 1f       	adc	r31, r19
    11c0:	80 81       	ld	r24, Z
    11c2:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
		i++;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	8f 5f       	subi	r24, 0xFF	; 255
    11ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
void CLCD_voidSendString(u8 * pvString)
{
	u8 i=0;
	while(pvString[i]!='\0')
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	9b 81       	ldd	r25, Y+3	; 0x03
    11d6:	fc 01       	movw	r30, r24
    11d8:	e2 0f       	add	r30, r18
    11da:	f3 1f       	adc	r31, r19
    11dc:	80 81       	ld	r24, Z
    11de:	88 23       	and	r24, r24
    11e0:	39 f7       	brne	.-50     	; 0x11b0 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(pvString[i]);
		i++;
	}
}
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <CLCD_voidGoToPosition>:
void CLCD_voidGoToPosition(u8 CLCD_u8x,u8 CLCD_u8y)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <CLCD_voidGoToPosition+0x6>
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	8a 83       	std	Y+2, r24	; 0x02
    11fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 CLCD_u8Position;
	if(CLCD_u8x==0)
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	88 23       	and	r24, r24
    1202:	19 f4       	brne	.+6      	; 0x120a <CLCD_voidGoToPosition+0x1c>
	{
		CLCD_u8Position=CLCD_u8y;
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	06 c0       	rjmp	.+12     	; 0x1216 <CLCD_voidGoToPosition+0x28>
	}
	else if(CLCD_u8x==1)
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	19 f4       	brne	.+6      	; 0x1216 <CLCD_voidGoToPosition+0x28>
	{
		CLCD_u8Position=CLCD_u8y+0x40;
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	80 5c       	subi	r24, 0xC0	; 192
    1214:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(CLCD_u8Position+128);
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	80 58       	subi	r24, 0x80	; 128
    121a:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <CLCD_voidClear>:
void CLCD_voidClear(void)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(0x01);
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidSendCommand>
}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	e9 97       	sbiw	r28, 0x39	; 57
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidSetPinVal(DIO_PORTC, DIO_PIN_VAL_HIGH,DIO_PIN0);
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	a0 e8       	ldi	r26, 0x80	; 128
    1264:	bf e3       	ldi	r27, 0x3F	; 63
    1266:	8d ab       	std	Y+53, r24	; 0x35
    1268:	9e ab       	std	Y+54, r25	; 0x36
    126a:	af ab       	std	Y+55, r26	; 0x37
    126c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126e:	6d a9       	ldd	r22, Y+53	; 0x35
    1270:	7e a9       	ldd	r23, Y+54	; 0x36
    1272:	8f a9       	ldd	r24, Y+55	; 0x37
    1274:	98 ad       	ldd	r25, Y+56	; 0x38
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	4a ef       	ldi	r20, 0xFA	; 250
    127c:	54 e4       	ldi	r21, 0x44	; 68
    127e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	89 ab       	std	Y+49, r24	; 0x31
    1288:	9a ab       	std	Y+50, r25	; 0x32
    128a:	ab ab       	std	Y+51, r26	; 0x33
    128c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    128e:	69 a9       	ldd	r22, Y+49	; 0x31
    1290:	7a a9       	ldd	r23, Y+50	; 0x32
    1292:	8b a9       	ldd	r24, Y+51	; 0x33
    1294:	9c a9       	ldd	r25, Y+52	; 0x34
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e8       	ldi	r20, 0x80	; 128
    129c:	5f e3       	ldi	r21, 0x3F	; 63
    129e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12a2:	88 23       	and	r24, r24
    12a4:	2c f4       	brge	.+10     	; 0x12b0 <LCD_displayCharacter+0x72>
		__ticks = 1;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	98 ab       	std	Y+48, r25	; 0x30
    12ac:	8f a7       	std	Y+47, r24	; 0x2f
    12ae:	3f c0       	rjmp	.+126    	; 0x132e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    12b0:	69 a9       	ldd	r22, Y+49	; 0x31
    12b2:	7a a9       	ldd	r23, Y+50	; 0x32
    12b4:	8b a9       	ldd	r24, Y+51	; 0x33
    12b6:	9c a9       	ldd	r25, Y+52	; 0x34
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	3f ef       	ldi	r19, 0xFF	; 255
    12bc:	4f e7       	ldi	r20, 0x7F	; 127
    12be:	57 e4       	ldi	r21, 0x47	; 71
    12c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12c4:	18 16       	cp	r1, r24
    12c6:	4c f5       	brge	.+82     	; 0x131a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c8:	6d a9       	ldd	r22, Y+53	; 0x35
    12ca:	7e a9       	ldd	r23, Y+54	; 0x36
    12cc:	8f a9       	ldd	r24, Y+55	; 0x37
    12ce:	98 ad       	ldd	r25, Y+56	; 0x38
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e2       	ldi	r20, 0x20	; 32
    12d6:	51 e4       	ldi	r21, 0x41	; 65
    12d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	bc 01       	movw	r22, r24
    12e2:	cd 01       	movw	r24, r26
    12e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	98 ab       	std	Y+48, r25	; 0x30
    12ee:	8f a7       	std	Y+47, r24	; 0x2f
    12f0:	0f c0       	rjmp	.+30     	; 0x1310 <LCD_displayCharacter+0xd2>
    12f2:	88 ec       	ldi	r24, 0xC8	; 200
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9e a7       	std	Y+46, r25	; 0x2e
    12f8:	8d a7       	std	Y+45, r24	; 0x2d
    12fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    12fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <LCD_displayCharacter+0xc0>
    1302:	9e a7       	std	Y+46, r25	; 0x2e
    1304:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1306:	8f a5       	ldd	r24, Y+47	; 0x2f
    1308:	98 a9       	ldd	r25, Y+48	; 0x30
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	98 ab       	std	Y+48, r25	; 0x30
    130e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1310:	8f a5       	ldd	r24, Y+47	; 0x2f
    1312:	98 a9       	ldd	r25, Y+48	; 0x30
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	69 f7       	brne	.-38     	; 0x12f2 <LCD_displayCharacter+0xb4>
    1318:	14 c0       	rjmp	.+40     	; 0x1342 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131a:	69 a9       	ldd	r22, Y+49	; 0x31
    131c:	7a a9       	ldd	r23, Y+50	; 0x32
    131e:	8b a9       	ldd	r24, Y+51	; 0x33
    1320:	9c a9       	ldd	r25, Y+52	; 0x34
    1322:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	98 ab       	std	Y+48, r25	; 0x30
    132c:	8f a7       	std	Y+47, r24	; 0x2f
    132e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1330:	98 a9       	ldd	r25, Y+48	; 0x30
    1332:	9c a7       	std	Y+44, r25	; 0x2c
    1334:	8b a7       	std	Y+43, r24	; 0x2b
    1336:	8b a5       	ldd	r24, Y+43	; 0x2b
    1338:	9c a5       	ldd	r25, Y+44	; 0x2c
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <LCD_displayCharacter+0xfc>
    133e:	9c a7       	std	Y+44, r25	; 0x2c
    1340:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinVal(DIO_PORTC,DIO_PIN_VAL_HIGH, DIO_PIN2);
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	61 e0       	ldi	r22, 0x01	; 1
    1346:	42 e0       	ldi	r20, 0x02	; 2
    1348:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a0 e8       	ldi	r26, 0x80	; 128
    1352:	bf e3       	ldi	r27, 0x3F	; 63
    1354:	8f a3       	std	Y+39, r24	; 0x27
    1356:	98 a7       	std	Y+40, r25	; 0x28
    1358:	a9 a7       	std	Y+41, r26	; 0x29
    135a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135c:	6f a1       	ldd	r22, Y+39	; 0x27
    135e:	78 a5       	ldd	r23, Y+40	; 0x28
    1360:	89 a5       	ldd	r24, Y+41	; 0x29
    1362:	9a a5       	ldd	r25, Y+42	; 0x2a
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	4a ef       	ldi	r20, 0xFA	; 250
    136a:	54 e4       	ldi	r21, 0x44	; 68
    136c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	8b a3       	std	Y+35, r24	; 0x23
    1376:	9c a3       	std	Y+36, r25	; 0x24
    1378:	ad a3       	std	Y+37, r26	; 0x25
    137a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    137c:	6b a1       	ldd	r22, Y+35	; 0x23
    137e:	7c a1       	ldd	r23, Y+36	; 0x24
    1380:	8d a1       	ldd	r24, Y+37	; 0x25
    1382:	9e a1       	ldd	r25, Y+38	; 0x26
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1390:	88 23       	and	r24, r24
    1392:	2c f4       	brge	.+10     	; 0x139e <LCD_displayCharacter+0x160>
		__ticks = 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9a a3       	std	Y+34, r25	; 0x22
    139a:	89 a3       	std	Y+33, r24	; 0x21
    139c:	3f c0       	rjmp	.+126    	; 0x141c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    139e:	6b a1       	ldd	r22, Y+35	; 0x23
    13a0:	7c a1       	ldd	r23, Y+36	; 0x24
    13a2:	8d a1       	ldd	r24, Y+37	; 0x25
    13a4:	9e a1       	ldd	r25, Y+38	; 0x26
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	3f ef       	ldi	r19, 0xFF	; 255
    13aa:	4f e7       	ldi	r20, 0x7F	; 127
    13ac:	57 e4       	ldi	r21, 0x47	; 71
    13ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13b2:	18 16       	cp	r1, r24
    13b4:	4c f5       	brge	.+82     	; 0x1408 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b6:	6f a1       	ldd	r22, Y+39	; 0x27
    13b8:	78 a5       	ldd	r23, Y+40	; 0x28
    13ba:	89 a5       	ldd	r24, Y+41	; 0x29
    13bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e2       	ldi	r20, 0x20	; 32
    13c4:	51 e4       	ldi	r21, 0x41	; 65
    13c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	bc 01       	movw	r22, r24
    13d0:	cd 01       	movw	r24, r26
    13d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	9a a3       	std	Y+34, r25	; 0x22
    13dc:	89 a3       	std	Y+33, r24	; 0x21
    13de:	0f c0       	rjmp	.+30     	; 0x13fe <LCD_displayCharacter+0x1c0>
    13e0:	88 ec       	ldi	r24, 0xC8	; 200
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	98 a3       	std	Y+32, r25	; 0x20
    13e6:	8f 8f       	std	Y+31, r24	; 0x1f
    13e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13ea:	98 a1       	ldd	r25, Y+32	; 0x20
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <LCD_displayCharacter+0x1ae>
    13f0:	98 a3       	std	Y+32, r25	; 0x20
    13f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f4:	89 a1       	ldd	r24, Y+33	; 0x21
    13f6:	9a a1       	ldd	r25, Y+34	; 0x22
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	9a a3       	std	Y+34, r25	; 0x22
    13fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1400:	9a a1       	ldd	r25, Y+34	; 0x22
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	69 f7       	brne	.-38     	; 0x13e0 <LCD_displayCharacter+0x1a2>
    1406:	14 c0       	rjmp	.+40     	; 0x1430 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1408:	6b a1       	ldd	r22, Y+35	; 0x23
    140a:	7c a1       	ldd	r23, Y+36	; 0x24
    140c:	8d a1       	ldd	r24, Y+37	; 0x25
    140e:	9e a1       	ldd	r25, Y+38	; 0x26
    1410:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9a a3       	std	Y+34, r25	; 0x22
    141a:	89 a3       	std	Y+33, r24	; 0x21
    141c:	89 a1       	ldd	r24, Y+33	; 0x21
    141e:	9a a1       	ldd	r25, Y+34	; 0x22
    1420:	9e 8f       	std	Y+30, r25	; 0x1e
    1422:	8d 8f       	std	Y+29, r24	; 0x1d
    1424:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1426:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <LCD_displayCharacter+0x1ea>
    142c:	9e 8f       	std	Y+30, r25	; 0x1e
    142e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_voidSetPortVal(DIO_PORTD, data);
    1430:	83 e0       	ldi	r24, 0x03	; 3
    1432:	69 ad       	ldd	r22, Y+57	; 0x39
    1434:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_voidSetPortVal>
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a0 e8       	ldi	r26, 0x80	; 128
    143e:	bf e3       	ldi	r27, 0x3F	; 63
    1440:	89 8f       	std	Y+25, r24	; 0x19
    1442:	9a 8f       	std	Y+26, r25	; 0x1a
    1444:	ab 8f       	std	Y+27, r26	; 0x1b
    1446:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1448:	69 8d       	ldd	r22, Y+25	; 0x19
    144a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    144c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	4a ef       	ldi	r20, 0xFA	; 250
    1456:	54 e4       	ldi	r21, 0x44	; 68
    1458:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	8d 8b       	std	Y+21, r24	; 0x15
    1462:	9e 8b       	std	Y+22, r25	; 0x16
    1464:	af 8b       	std	Y+23, r26	; 0x17
    1466:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1468:	6d 89       	ldd	r22, Y+21	; 0x15
    146a:	7e 89       	ldd	r23, Y+22	; 0x16
    146c:	8f 89       	ldd	r24, Y+23	; 0x17
    146e:	98 8d       	ldd	r25, Y+24	; 0x18
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	40 e8       	ldi	r20, 0x80	; 128
    1476:	5f e3       	ldi	r21, 0x3F	; 63
    1478:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    147c:	88 23       	and	r24, r24
    147e:	2c f4       	brge	.+10     	; 0x148a <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9c 8b       	std	Y+20, r25	; 0x14
    1486:	8b 8b       	std	Y+19, r24	; 0x13
    1488:	3f c0       	rjmp	.+126    	; 0x1508 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    148a:	6d 89       	ldd	r22, Y+21	; 0x15
    148c:	7e 89       	ldd	r23, Y+22	; 0x16
    148e:	8f 89       	ldd	r24, Y+23	; 0x17
    1490:	98 8d       	ldd	r25, Y+24	; 0x18
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	3f ef       	ldi	r19, 0xFF	; 255
    1496:	4f e7       	ldi	r20, 0x7F	; 127
    1498:	57 e4       	ldi	r21, 0x47	; 71
    149a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    149e:	18 16       	cp	r1, r24
    14a0:	4c f5       	brge	.+82     	; 0x14f4 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a2:	69 8d       	ldd	r22, Y+25	; 0x19
    14a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e2       	ldi	r20, 0x20	; 32
    14b0:	51 e4       	ldi	r21, 0x41	; 65
    14b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9c 8b       	std	Y+20, r25	; 0x14
    14c8:	8b 8b       	std	Y+19, r24	; 0x13
    14ca:	0f c0       	rjmp	.+30     	; 0x14ea <LCD_displayCharacter+0x2ac>
    14cc:	88 ec       	ldi	r24, 0xC8	; 200
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9a 8b       	std	Y+18, r25	; 0x12
    14d2:	89 8b       	std	Y+17, r24	; 0x11
    14d4:	89 89       	ldd	r24, Y+17	; 0x11
    14d6:	9a 89       	ldd	r25, Y+18	; 0x12
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <LCD_displayCharacter+0x29a>
    14dc:	9a 8b       	std	Y+18, r25	; 0x12
    14de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e0:	8b 89       	ldd	r24, Y+19	; 0x13
    14e2:	9c 89       	ldd	r25, Y+20	; 0x14
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	9c 8b       	std	Y+20, r25	; 0x14
    14e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ea:	8b 89       	ldd	r24, Y+19	; 0x13
    14ec:	9c 89       	ldd	r25, Y+20	; 0x14
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	69 f7       	brne	.-38     	; 0x14cc <LCD_displayCharacter+0x28e>
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f4:	6d 89       	ldd	r22, Y+21	; 0x15
    14f6:	7e 89       	ldd	r23, Y+22	; 0x16
    14f8:	8f 89       	ldd	r24, Y+23	; 0x17
    14fa:	98 8d       	ldd	r25, Y+24	; 0x18
    14fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	9c 8b       	std	Y+20, r25	; 0x14
    1506:	8b 8b       	std	Y+19, r24	; 0x13
    1508:	8b 89       	ldd	r24, Y+19	; 0x13
    150a:	9c 89       	ldd	r25, Y+20	; 0x14
    150c:	98 8b       	std	Y+16, r25	; 0x10
    150e:	8f 87       	std	Y+15, r24	; 0x0f
    1510:	8f 85       	ldd	r24, Y+15	; 0x0f
    1512:	98 89       	ldd	r25, Y+16	; 0x10
    1514:	01 97       	sbiw	r24, 0x01	; 1
    1516:	f1 f7       	brne	.-4      	; 0x1514 <LCD_displayCharacter+0x2d6>
    1518:	98 8b       	std	Y+16, r25	; 0x10
    151a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinVal(DIO_PORTC,DIO_PIN_VAL_LOW, DIO_PIN2);
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	42 e0       	ldi	r20, 0x02	; 2
    1522:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a0 e8       	ldi	r26, 0x80	; 128
    152c:	bf e3       	ldi	r27, 0x3F	; 63
    152e:	8b 87       	std	Y+11, r24	; 0x0b
    1530:	9c 87       	std	Y+12, r25	; 0x0c
    1532:	ad 87       	std	Y+13, r26	; 0x0d
    1534:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1536:	6b 85       	ldd	r22, Y+11	; 0x0b
    1538:	7c 85       	ldd	r23, Y+12	; 0x0c
    153a:	8d 85       	ldd	r24, Y+13	; 0x0d
    153c:	9e 85       	ldd	r25, Y+14	; 0x0e
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	4a ef       	ldi	r20, 0xFA	; 250
    1544:	54 e4       	ldi	r21, 0x44	; 68
    1546:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	8f 83       	std	Y+7, r24	; 0x07
    1550:	98 87       	std	Y+8, r25	; 0x08
    1552:	a9 87       	std	Y+9, r26	; 0x09
    1554:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1556:	6f 81       	ldd	r22, Y+7	; 0x07
    1558:	78 85       	ldd	r23, Y+8	; 0x08
    155a:	89 85       	ldd	r24, Y+9	; 0x09
    155c:	9a 85       	ldd	r25, Y+10	; 0x0a
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e8       	ldi	r20, 0x80	; 128
    1564:	5f e3       	ldi	r21, 0x3F	; 63
    1566:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    156a:	88 23       	and	r24, r24
    156c:	2c f4       	brge	.+10     	; 0x1578 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	9e 83       	std	Y+6, r25	; 0x06
    1574:	8d 83       	std	Y+5, r24	; 0x05
    1576:	3f c0       	rjmp	.+126    	; 0x15f6 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1578:	6f 81       	ldd	r22, Y+7	; 0x07
    157a:	78 85       	ldd	r23, Y+8	; 0x08
    157c:	89 85       	ldd	r24, Y+9	; 0x09
    157e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	3f ef       	ldi	r19, 0xFF	; 255
    1584:	4f e7       	ldi	r20, 0x7F	; 127
    1586:	57 e4       	ldi	r21, 0x47	; 71
    1588:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    158c:	18 16       	cp	r1, r24
    158e:	4c f5       	brge	.+82     	; 0x15e2 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1590:	6b 85       	ldd	r22, Y+11	; 0x0b
    1592:	7c 85       	ldd	r23, Y+12	; 0x0c
    1594:	8d 85       	ldd	r24, Y+13	; 0x0d
    1596:	9e 85       	ldd	r25, Y+14	; 0x0e
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e2       	ldi	r20, 0x20	; 32
    159e:	51 e4       	ldi	r21, 0x41	; 65
    15a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	bc 01       	movw	r22, r24
    15aa:	cd 01       	movw	r24, r26
    15ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	9e 83       	std	Y+6, r25	; 0x06
    15b6:	8d 83       	std	Y+5, r24	; 0x05
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <LCD_displayCharacter+0x39a>
    15ba:	88 ec       	ldi	r24, 0xC8	; 200
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9c 83       	std	Y+4, r25	; 0x04
    15c0:	8b 83       	std	Y+3, r24	; 0x03
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <LCD_displayCharacter+0x388>
    15ca:	9c 83       	std	Y+4, r25	; 0x04
    15cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	69 f7       	brne	.-38     	; 0x15ba <LCD_displayCharacter+0x37c>
    15e0:	14 c0       	rjmp	.+40     	; 0x160a <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e2:	6f 81       	ldd	r22, Y+7	; 0x07
    15e4:	78 85       	ldd	r23, Y+8	; 0x08
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9e 83       	std	Y+6, r25	; 0x06
    15f4:	8d 83       	std	Y+5, r24	; 0x05
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	9a 83       	std	Y+2, r25	; 0x02
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <LCD_displayCharacter+0x3c4>
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    160a:	e9 96       	adiw	r28, 0x39	; 57
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <CLCD_voidSend_Num>:
void CLCD_voidSend_Num(u32 _NUM)
{
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	60 97       	sbiw	r28, 0x10	; 16
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	6d 87       	std	Y+13, r22	; 0x0d
    1636:	7e 87       	std	Y+14, r23	; 0x0e
    1638:	8f 87       	std	Y+15, r24	; 0x0f
    163a:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[10],i=0,j=0;
    163c:	1a 82       	std	Y+2, r1	; 0x02
    163e:	19 82       	std	Y+1, r1	; 0x01
	if(_NUM==0)
    1640:	8d 85       	ldd	r24, Y+13	; 0x0d
    1642:	9e 85       	ldd	r25, Y+14	; 0x0e
    1644:	af 85       	ldd	r26, Y+15	; 0x0f
    1646:	b8 89       	ldd	r27, Y+16	; 0x10
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	a1 05       	cpc	r26, r1
    164c:	b1 05       	cpc	r27, r1
    164e:	91 f5       	brne	.+100    	; 0x16b4 <CLCD_voidSend_Num+0x98>
	{
		CLCD_voidSendData('0');
    1650:	80 e3       	ldi	r24, 0x30	; 48
    1652:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
    1656:	4d c0       	rjmp	.+154    	; 0x16f2 <CLCD_voidSend_Num+0xd6>
	}
	else
	{
		while(_NUM)
		{
			arr[i]=_NUM%10+'0';
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	08 2f       	mov	r16, r24
    165c:	10 e0       	ldi	r17, 0x00	; 0
    165e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1660:	9e 85       	ldd	r25, Y+14	; 0x0e
    1662:	af 85       	ldd	r26, Y+15	; 0x0f
    1664:	b8 89       	ldd	r27, Y+16	; 0x10
    1666:	2a e0       	ldi	r18, 0x0A	; 10
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	bc 01       	movw	r22, r24
    1670:	cd 01       	movw	r24, r26
    1672:	0e 94 b8 1a 	call	0x3570	; 0x3570 <__udivmodsi4>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	28 2f       	mov	r18, r24
    167c:	20 5d       	subi	r18, 0xD0	; 208
    167e:	ce 01       	movw	r24, r28
    1680:	03 96       	adiw	r24, 0x03	; 3
    1682:	fc 01       	movw	r30, r24
    1684:	e0 0f       	add	r30, r16
    1686:	f1 1f       	adc	r31, r17
    1688:	20 83       	st	Z, r18
			_NUM/=10;
    168a:	8d 85       	ldd	r24, Y+13	; 0x0d
    168c:	9e 85       	ldd	r25, Y+14	; 0x0e
    168e:	af 85       	ldd	r26, Y+15	; 0x0f
    1690:	b8 89       	ldd	r27, Y+16	; 0x10
    1692:	2a e0       	ldi	r18, 0x0A	; 10
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <__udivmodsi4>
    16a2:	da 01       	movw	r26, r20
    16a4:	c9 01       	movw	r24, r18
    16a6:	8d 87       	std	Y+13, r24	; 0x0d
    16a8:	9e 87       	std	Y+14, r25	; 0x0e
    16aa:	af 87       	std	Y+15, r26	; 0x0f
    16ac:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');
	}
	else
	{
		while(_NUM)
    16b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b8:	af 85       	ldd	r26, Y+15	; 0x0f
    16ba:	b8 89       	ldd	r27, Y+16	; 0x10
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	a1 05       	cpc	r26, r1
    16c0:	b1 05       	cpc	r27, r1
    16c2:	51 f6       	brne	.-108    	; 0x1658 <CLCD_voidSend_Num+0x3c>
		{
			arr[i]=_NUM%10+'0';
			_NUM/=10;
			i++;
		}
		for(j=i;j>0;j--)
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	11 c0       	rjmp	.+34     	; 0x16ec <CLCD_voidSend_Num+0xd0>
		{
			CLCD_voidSendData(arr[j-1]);
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9c 01       	movw	r18, r24
    16d2:	21 50       	subi	r18, 0x01	; 1
    16d4:	30 40       	sbci	r19, 0x00	; 0
    16d6:	ce 01       	movw	r24, r28
    16d8:	03 96       	adiw	r24, 0x03	; 3
    16da:	fc 01       	movw	r30, r24
    16dc:	e2 0f       	add	r30, r18
    16de:	f3 1f       	adc	r31, r19
    16e0:	80 81       	ld	r24, Z
    16e2:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>
		{
			arr[i]=_NUM%10+'0';
			_NUM/=10;
			i++;
		}
		for(j=i;j>0;j--)
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	81 50       	subi	r24, 0x01	; 1
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	88 23       	and	r24, r24
    16f0:	61 f7       	brne	.-40     	; 0x16ca <CLCD_voidSend_Num+0xae>
		{
			CLCD_voidSendData(arr[j-1]);
		}

	}
}
    16f2:	60 96       	adiw	r28, 0x10	; 16
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	08 95       	ret

00001708 <DIO_voidSetPortDir>:

#include "DIO_interface.h"


void DIO_voidSetPortDir(u8 DIO_u8Port ,u8 DIO_u8Dir)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	00 d0       	rcall	.+0      	; 0x170e <DIO_voidSetPortDir+0x6>
    170e:	00 d0       	rcall	.+0      	; 0x1710 <DIO_voidSetPortDir+0x8>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	6a 83       	std	Y+2, r22	; 0x02

		switch(DIO_u8Port)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3c 83       	std	Y+4, r19	; 0x04
    1720:	2b 83       	std	Y+3, r18	; 0x03
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	91 05       	cpc	r25, r1
    172a:	d1 f0       	breq	.+52     	; 0x1760 <DIO_voidSetPortDir+0x58>
    172c:	2b 81       	ldd	r18, Y+3	; 0x03
    172e:	3c 81       	ldd	r19, Y+4	; 0x04
    1730:	22 30       	cpi	r18, 0x02	; 2
    1732:	31 05       	cpc	r19, r1
    1734:	2c f4       	brge	.+10     	; 0x1740 <DIO_voidSetPortDir+0x38>
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	61 f0       	breq	.+24     	; 0x1756 <DIO_voidSetPortDir+0x4e>
    173e:	1e c0       	rjmp	.+60     	; 0x177c <DIO_voidSetPortDir+0x74>
    1740:	2b 81       	ldd	r18, Y+3	; 0x03
    1742:	3c 81       	ldd	r19, Y+4	; 0x04
    1744:	22 30       	cpi	r18, 0x02	; 2
    1746:	31 05       	cpc	r19, r1
    1748:	81 f0       	breq	.+32     	; 0x176a <DIO_voidSetPortDir+0x62>
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	83 30       	cpi	r24, 0x03	; 3
    1750:	91 05       	cpc	r25, r1
    1752:	81 f0       	breq	.+32     	; 0x1774 <DIO_voidSetPortDir+0x6c>
    1754:	13 c0       	rjmp	.+38     	; 0x177c <DIO_voidSetPortDir+0x74>
		{
		case DIO_PORTA:DDRA=DIO_u8Dir;break;
    1756:	ea e3       	ldi	r30, 0x3A	; 58
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	80 83       	st	Z, r24
    175e:	0e c0       	rjmp	.+28     	; 0x177c <DIO_voidSetPortDir+0x74>
		case DIO_PORTB:DDRB=DIO_u8Dir;break;
    1760:	e7 e3       	ldi	r30, 0x37	; 55
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	80 83       	st	Z, r24
    1768:	09 c0       	rjmp	.+18     	; 0x177c <DIO_voidSetPortDir+0x74>
		case DIO_PORTC:DDRC=DIO_u8Dir;break;
    176a:	e4 e3       	ldi	r30, 0x34	; 52
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	80 83       	st	Z, r24
    1772:	04 c0       	rjmp	.+8      	; 0x177c <DIO_voidSetPortDir+0x74>
		case DIO_PORTD:DDRD=DIO_u8Dir;break;
    1774:	e1 e3       	ldi	r30, 0x31	; 49
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	80 83       	st	Z, r24
		}
	}
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <DIO_voidSetPortVal>:


	void DIO_voidSetPortVal(u8 DIO_u8Port ,u8 DIO_u8Val)
	{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <DIO_voidSetPortVal+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <DIO_voidSetPortVal+0x8>
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	6a 83       	std	Y+2, r22	; 0x02

			switch(DIO_u8Port)
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	3c 83       	std	Y+4, r19	; 0x04
    17a2:	2b 83       	std	Y+3, r18	; 0x03
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	9c 81       	ldd	r25, Y+4	; 0x04
    17a8:	81 30       	cpi	r24, 0x01	; 1
    17aa:	91 05       	cpc	r25, r1
    17ac:	d1 f0       	breq	.+52     	; 0x17e2 <DIO_voidSetPortVal+0x58>
    17ae:	2b 81       	ldd	r18, Y+3	; 0x03
    17b0:	3c 81       	ldd	r19, Y+4	; 0x04
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <DIO_voidSetPortVal+0x38>
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	9c 81       	ldd	r25, Y+4	; 0x04
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	61 f0       	breq	.+24     	; 0x17d8 <DIO_voidSetPortVal+0x4e>
    17c0:	1e c0       	rjmp	.+60     	; 0x17fe <DIO_voidSetPortVal+0x74>
    17c2:	2b 81       	ldd	r18, Y+3	; 0x03
    17c4:	3c 81       	ldd	r19, Y+4	; 0x04
    17c6:	22 30       	cpi	r18, 0x02	; 2
    17c8:	31 05       	cpc	r19, r1
    17ca:	81 f0       	breq	.+32     	; 0x17ec <DIO_voidSetPortVal+0x62>
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	9c 81       	ldd	r25, Y+4	; 0x04
    17d0:	83 30       	cpi	r24, 0x03	; 3
    17d2:	91 05       	cpc	r25, r1
    17d4:	81 f0       	breq	.+32     	; 0x17f6 <DIO_voidSetPortVal+0x6c>
    17d6:	13 c0       	rjmp	.+38     	; 0x17fe <DIO_voidSetPortVal+0x74>
			{
			case DIO_PORTA:PORTA=DIO_u8Val;break;
    17d8:	eb e3       	ldi	r30, 0x3B	; 59
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	80 83       	st	Z, r24
    17e0:	0e c0       	rjmp	.+28     	; 0x17fe <DIO_voidSetPortVal+0x74>
			case DIO_PORTB:PORTB=DIO_u8Val;break;
    17e2:	e8 e3       	ldi	r30, 0x38	; 56
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	80 83       	st	Z, r24
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <DIO_voidSetPortVal+0x74>
			case DIO_PORTC:PORTC=DIO_u8Val;break;
    17ec:	e5 e3       	ldi	r30, 0x35	; 53
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	80 83       	st	Z, r24
    17f4:	04 c0       	rjmp	.+8      	; 0x17fe <DIO_voidSetPortVal+0x74>
			case DIO_PORTD:PORTD=DIO_u8Val;break;
    17f6:	e2 e3       	ldi	r30, 0x32	; 50
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	80 83       	st	Z, r24
			}
		}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <DIO_voidSetPinDir>:



	void DIO_voidSetPinDir(u8 DIO_u8Port ,u8 DIO_u8Dir,u8 DIO_u8Pin)
	{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	27 97       	sbiw	r28, 0x07	; 7
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	6a 83       	std	Y+2, r22	; 0x02
    1824:	4b 83       	std	Y+3, r20	; 0x03
		if(DIO_u8Pin<=7)
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	88 30       	cpi	r24, 0x08	; 8
    182a:	08 f0       	brcs	.+2      	; 0x182e <DIO_voidSetPinDir+0x22>
    182c:	ea c0       	rjmp	.+468    	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
		{
			if(DIO_u8Dir==DIO_PIN_DIR_OUT)
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	09 f0       	breq	.+2      	; 0x1836 <DIO_voidSetPinDir+0x2a>
    1834:	6f c0       	rjmp	.+222    	; 0x1914 <DIO_voidSetPinDir+0x108>
				switch(DIO_u8Port)
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3f 83       	std	Y+7, r19	; 0x07
    183e:	2e 83       	std	Y+6, r18	; 0x06
    1840:	8e 81       	ldd	r24, Y+6	; 0x06
    1842:	9f 81       	ldd	r25, Y+7	; 0x07
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	91 05       	cpc	r25, r1
    1848:	49 f1       	breq	.+82     	; 0x189c <DIO_voidSetPinDir+0x90>
    184a:	2e 81       	ldd	r18, Y+6	; 0x06
    184c:	3f 81       	ldd	r19, Y+7	; 0x07
    184e:	22 30       	cpi	r18, 0x02	; 2
    1850:	31 05       	cpc	r19, r1
    1852:	2c f4       	brge	.+10     	; 0x185e <DIO_voidSetPinDir+0x52>
    1854:	8e 81       	ldd	r24, Y+6	; 0x06
    1856:	9f 81       	ldd	r25, Y+7	; 0x07
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	61 f0       	breq	.+24     	; 0x1874 <DIO_voidSetPinDir+0x68>
    185c:	d2 c0       	rjmp	.+420    	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
    185e:	2e 81       	ldd	r18, Y+6	; 0x06
    1860:	3f 81       	ldd	r19, Y+7	; 0x07
    1862:	22 30       	cpi	r18, 0x02	; 2
    1864:	31 05       	cpc	r19, r1
    1866:	71 f1       	breq	.+92     	; 0x18c4 <DIO_voidSetPinDir+0xb8>
    1868:	8e 81       	ldd	r24, Y+6	; 0x06
    186a:	9f 81       	ldd	r25, Y+7	; 0x07
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	91 05       	cpc	r25, r1
    1870:	e9 f1       	breq	.+122    	; 0x18ec <DIO_voidSetPinDir+0xe0>
    1872:	c7 c0       	rjmp	.+398    	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
				{
				case DIO_PORTA:SET_BIT(DDRA,DIO_u8Pin);break;
    1874:	aa e3       	ldi	r26, 0x3A	; 58
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	ea e3       	ldi	r30, 0x3A	; 58
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	48 2f       	mov	r20, r24
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	02 2e       	mov	r0, r18
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <DIO_voidSetPinDir+0x86>
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	0a 94       	dec	r0
    1894:	e2 f7       	brpl	.-8      	; 0x188e <DIO_voidSetPinDir+0x82>
    1896:	84 2b       	or	r24, r20
    1898:	8c 93       	st	X, r24
    189a:	b3 c0       	rjmp	.+358    	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
				case DIO_PORTB:SET_BIT(DDRB,DIO_u8Pin);break;
    189c:	a7 e3       	ldi	r26, 0x37	; 55
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e7 e3       	ldi	r30, 0x37	; 55
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 2e       	mov	r0, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <DIO_voidSetPinDir+0xae>
    18b6:	88 0f       	add	r24, r24
    18b8:	99 1f       	adc	r25, r25
    18ba:	0a 94       	dec	r0
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <DIO_voidSetPinDir+0xaa>
    18be:	84 2b       	or	r24, r20
    18c0:	8c 93       	st	X, r24
    18c2:	9f c0       	rjmp	.+318    	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
				case DIO_PORTC:SET_BIT(DDRC,DIO_u8Pin);break;
    18c4:	a4 e3       	ldi	r26, 0x34	; 52
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e4 e3       	ldi	r30, 0x34	; 52
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <DIO_voidSetPinDir+0xd6>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <DIO_voidSetPinDir+0xd2>
    18e6:	84 2b       	or	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	8b c0       	rjmp	.+278    	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
				case DIO_PORTD:SET_BIT(DDRD,DIO_u8Pin);break;
    18ec:	a1 e3       	ldi	r26, 0x31	; 49
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e1 e3       	ldi	r30, 0x31	; 49
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <DIO_voidSetPinDir+0xfe>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <DIO_voidSetPinDir+0xfa>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	77 c0       	rjmp	.+238    	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
				}
			else if(DIO_u8Dir==DIO_PIN_DIR_IN)
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	88 23       	and	r24, r24
    1918:	09 f0       	breq	.+2      	; 0x191c <DIO_voidSetPinDir+0x110>
    191a:	73 c0       	rjmp	.+230    	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
				switch(DIO_u8Port)
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	3d 83       	std	Y+5, r19	; 0x05
    1924:	2c 83       	std	Y+4, r18	; 0x04
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	81 30       	cpi	r24, 0x01	; 1
    192c:	91 05       	cpc	r25, r1
    192e:	59 f1       	breq	.+86     	; 0x1986 <DIO_voidSetPinDir+0x17a>
    1930:	2c 81       	ldd	r18, Y+4	; 0x04
    1932:	3d 81       	ldd	r19, Y+5	; 0x05
    1934:	22 30       	cpi	r18, 0x02	; 2
    1936:	31 05       	cpc	r19, r1
    1938:	2c f4       	brge	.+10     	; 0x1944 <DIO_voidSetPinDir+0x138>
    193a:	8c 81       	ldd	r24, Y+4	; 0x04
    193c:	9d 81       	ldd	r25, Y+5	; 0x05
    193e:	00 97       	sbiw	r24, 0x00	; 0
    1940:	69 f0       	breq	.+26     	; 0x195c <DIO_voidSetPinDir+0x150>
    1942:	5f c0       	rjmp	.+190    	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
    1944:	2c 81       	ldd	r18, Y+4	; 0x04
    1946:	3d 81       	ldd	r19, Y+5	; 0x05
    1948:	22 30       	cpi	r18, 0x02	; 2
    194a:	31 05       	cpc	r19, r1
    194c:	89 f1       	breq	.+98     	; 0x19b0 <DIO_voidSetPinDir+0x1a4>
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	83 30       	cpi	r24, 0x03	; 3
    1954:	91 05       	cpc	r25, r1
    1956:	09 f4       	brne	.+2      	; 0x195a <DIO_voidSetPinDir+0x14e>
    1958:	40 c0       	rjmp	.+128    	; 0x19da <DIO_voidSetPinDir+0x1ce>
    195a:	53 c0       	rjmp	.+166    	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
				{
				case DIO_PORTA:CLR_BIT(DDRA,DIO_u8Pin);break;
    195c:	aa e3       	ldi	r26, 0x3A	; 58
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	ea e3       	ldi	r30, 0x3A	; 58
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	48 2f       	mov	r20, r24
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	02 2e       	mov	r0, r18
    1974:	02 c0       	rjmp	.+4      	; 0x197a <DIO_voidSetPinDir+0x16e>
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	0a 94       	dec	r0
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <DIO_voidSetPinDir+0x16a>
    197e:	80 95       	com	r24
    1980:	84 23       	and	r24, r20
    1982:	8c 93       	st	X, r24
    1984:	3e c0       	rjmp	.+124    	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
				case DIO_PORTB:CLR_BIT(DDRB,DIO_u8Pin);break;
    1986:	a7 e3       	ldi	r26, 0x37	; 55
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e7 e3       	ldi	r30, 0x37	; 55
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	48 2f       	mov	r20, r24
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 2e       	mov	r0, r18
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <DIO_voidSetPinDir+0x198>
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	0a 94       	dec	r0
    19a6:	e2 f7       	brpl	.-8      	; 0x19a0 <DIO_voidSetPinDir+0x194>
    19a8:	80 95       	com	r24
    19aa:	84 23       	and	r24, r20
    19ac:	8c 93       	st	X, r24
    19ae:	29 c0       	rjmp	.+82     	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
				case DIO_PORTC:CLR_BIT(DDRC,DIO_u8Pin);break;
    19b0:	a4 e3       	ldi	r26, 0x34	; 52
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e4 e3       	ldi	r30, 0x34	; 52
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_voidSetPinDir+0x1c2>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_voidSetPinDir+0x1be>
    19d2:	80 95       	com	r24
    19d4:	84 23       	and	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	14 c0       	rjmp	.+40     	; 0x1a02 <DIO_voidSetPinDir+0x1f6>
				case DIO_PORTD:CLR_BIT(DDRD,DIO_u8Pin);break;
    19da:	a1 e3       	ldi	r26, 0x31	; 49
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e1 e3       	ldi	r30, 0x31	; 49
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_voidSetPinDir+0x1ec>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_voidSetPinDir+0x1e8>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
				}
		}

	}
    1a02:	27 96       	adiw	r28, 0x07	; 7
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <DIO_voidSetPinVal>:

	void DIO_voidSetPinVal(u8 DIO_u8Port ,u8 DIO_u8Val,u8 DIO_u8Pin)
	{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	27 97       	sbiw	r28, 0x07	; 7
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	89 83       	std	Y+1, r24	; 0x01
    1a2a:	6a 83       	std	Y+2, r22	; 0x02
    1a2c:	4b 83       	std	Y+3, r20	; 0x03
			if(DIO_u8Pin<=7)
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	88 30       	cpi	r24, 0x08	; 8
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <DIO_voidSetPinVal+0x22>
    1a34:	ee c0       	rjmp	.+476    	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
			{
				if(DIO_u8Val==DIO_PIN_VAL_HIGH)
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	81 30       	cpi	r24, 0x01	; 1
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <DIO_voidSetPinVal+0x2a>
    1a3c:	6f c0       	rjmp	.+222    	; 0x1b1c <DIO_voidSetPinVal+0x108>
				{
					switch(DIO_u8Port)
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	3f 83       	std	Y+7, r19	; 0x07
    1a46:	2e 83       	std	Y+6, r18	; 0x06
    1a48:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	91 05       	cpc	r25, r1
    1a50:	49 f1       	breq	.+82     	; 0x1aa4 <DIO_voidSetPinVal+0x90>
    1a52:	2e 81       	ldd	r18, Y+6	; 0x06
    1a54:	3f 81       	ldd	r19, Y+7	; 0x07
    1a56:	22 30       	cpi	r18, 0x02	; 2
    1a58:	31 05       	cpc	r19, r1
    1a5a:	2c f4       	brge	.+10     	; 0x1a66 <DIO_voidSetPinVal+0x52>
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	61 f0       	breq	.+24     	; 0x1a7c <DIO_voidSetPinVal+0x68>
    1a64:	d6 c0       	rjmp	.+428    	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
    1a66:	2e 81       	ldd	r18, Y+6	; 0x06
    1a68:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6a:	22 30       	cpi	r18, 0x02	; 2
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	71 f1       	breq	.+92     	; 0x1acc <DIO_voidSetPinVal+0xb8>
    1a70:	8e 81       	ldd	r24, Y+6	; 0x06
    1a72:	9f 81       	ldd	r25, Y+7	; 0x07
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	91 05       	cpc	r25, r1
    1a78:	e9 f1       	breq	.+122    	; 0x1af4 <DIO_voidSetPinVal+0xe0>
    1a7a:	cb c0       	rjmp	.+406    	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
					{
					case DIO_PORTA:SET_BIT(PORTA,DIO_u8Pin);break;
    1a7c:	ab e3       	ldi	r26, 0x3B	; 59
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	eb e3       	ldi	r30, 0x3B	; 59
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 2e       	mov	r0, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <DIO_voidSetPinVal+0x86>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	0a 94       	dec	r0
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <DIO_voidSetPinVal+0x82>
    1a9e:	84 2b       	or	r24, r20
    1aa0:	8c 93       	st	X, r24
    1aa2:	b7 c0       	rjmp	.+366    	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
					case DIO_PORTB:SET_BIT(PORTB,DIO_u8Pin);break;
    1aa4:	a8 e3       	ldi	r26, 0x38	; 56
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e8 e3       	ldi	r30, 0x38	; 56
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <DIO_voidSetPinVal+0xae>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <DIO_voidSetPinVal+0xaa>
    1ac6:	84 2b       	or	r24, r20
    1ac8:	8c 93       	st	X, r24
    1aca:	a3 c0       	rjmp	.+326    	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
					case DIO_PORTC:SET_BIT(PORTC,DIO_u8Pin);break;
    1acc:	a5 e3       	ldi	r26, 0x35	; 53
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e5 e3       	ldi	r30, 0x35	; 53
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	48 2f       	mov	r20, r24
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	02 2e       	mov	r0, r18
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <DIO_voidSetPinVal+0xd6>
    1ae6:	88 0f       	add	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	0a 94       	dec	r0
    1aec:	e2 f7       	brpl	.-8      	; 0x1ae6 <DIO_voidSetPinVal+0xd2>
    1aee:	84 2b       	or	r24, r20
    1af0:	8c 93       	st	X, r24
    1af2:	8f c0       	rjmp	.+286    	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
					case DIO_PORTD:SET_BIT(PORTD,DIO_u8Pin);break;
    1af4:	a2 e3       	ldi	r26, 0x32	; 50
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e2 e3       	ldi	r30, 0x32	; 50
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <DIO_voidSetPinVal+0xfe>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <DIO_voidSetPinVal+0xfa>
    1b16:	84 2b       	or	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	7b c0       	rjmp	.+246    	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
					}
				}

			else if(DIO_u8Pin<=7)
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	88 30       	cpi	r24, 0x08	; 8
    1b20:	08 f0       	brcs	.+2      	; 0x1b24 <DIO_voidSetPinVal+0x110>
    1b22:	77 c0       	rjmp	.+238    	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
			{
				if(DIO_u8Val==DIO_PIN_VAL_LOW)
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	88 23       	and	r24, r24
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <DIO_voidSetPinVal+0x118>
    1b2a:	73 c0       	rjmp	.+230    	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
				{
					switch(DIO_u8Port)
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	3d 83       	std	Y+5, r19	; 0x05
    1b34:	2c 83       	std	Y+4, r18	; 0x04
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	59 f1       	breq	.+86     	; 0x1b96 <DIO_voidSetPinVal+0x182>
    1b40:	2c 81       	ldd	r18, Y+4	; 0x04
    1b42:	3d 81       	ldd	r19, Y+5	; 0x05
    1b44:	22 30       	cpi	r18, 0x02	; 2
    1b46:	31 05       	cpc	r19, r1
    1b48:	2c f4       	brge	.+10     	; 0x1b54 <DIO_voidSetPinVal+0x140>
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	69 f0       	breq	.+26     	; 0x1b6c <DIO_voidSetPinVal+0x158>
    1b52:	5f c0       	rjmp	.+190    	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
    1b54:	2c 81       	ldd	r18, Y+4	; 0x04
    1b56:	3d 81       	ldd	r19, Y+5	; 0x05
    1b58:	22 30       	cpi	r18, 0x02	; 2
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	89 f1       	breq	.+98     	; 0x1bc0 <DIO_voidSetPinVal+0x1ac>
    1b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b60:	9d 81       	ldd	r25, Y+5	; 0x05
    1b62:	83 30       	cpi	r24, 0x03	; 3
    1b64:	91 05       	cpc	r25, r1
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <DIO_voidSetPinVal+0x156>
    1b68:	40 c0       	rjmp	.+128    	; 0x1bea <DIO_voidSetPinVal+0x1d6>
    1b6a:	53 c0       	rjmp	.+166    	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
					{
					case DIO_PORTA:CLR_BIT(PORTA,DIO_u8Pin);break;
    1b6c:	ab e3       	ldi	r26, 0x3B	; 59
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	eb e3       	ldi	r30, 0x3B	; 59
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_voidSetPinVal+0x176>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DIO_voidSetPinVal+0x172>
    1b8e:	80 95       	com	r24
    1b90:	84 23       	and	r24, r20
    1b92:	8c 93       	st	X, r24
    1b94:	3e c0       	rjmp	.+124    	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
					case DIO_PORTB:CLR_BIT(PORTB,DIO_u8Pin);break;
    1b96:	a8 e3       	ldi	r26, 0x38	; 56
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e8 e3       	ldi	r30, 0x38	; 56
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	48 2f       	mov	r20, r24
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	02 2e       	mov	r0, r18
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <DIO_voidSetPinVal+0x1a0>
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	0a 94       	dec	r0
    1bb6:	e2 f7       	brpl	.-8      	; 0x1bb0 <DIO_voidSetPinVal+0x19c>
    1bb8:	80 95       	com	r24
    1bba:	84 23       	and	r24, r20
    1bbc:	8c 93       	st	X, r24
    1bbe:	29 c0       	rjmp	.+82     	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
					case DIO_PORTC:CLR_BIT(PORTC,DIO_u8Pin);break;
    1bc0:	a5 e3       	ldi	r26, 0x35	; 53
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e5 e3       	ldi	r30, 0x35	; 53
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <DIO_voidSetPinVal+0x1ca>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <DIO_voidSetPinVal+0x1c6>
    1be2:	80 95       	com	r24
    1be4:	84 23       	and	r24, r20
    1be6:	8c 93       	st	X, r24
    1be8:	14 c0       	rjmp	.+40     	; 0x1c12 <DIO_voidSetPinVal+0x1fe>
					case DIO_PORTD:CLR_BIT(PORTD,DIO_u8Pin);break;
    1bea:	a2 e3       	ldi	r26, 0x32	; 50
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e2 e3       	ldi	r30, 0x32	; 50
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <DIO_voidSetPinVal+0x1f4>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <DIO_voidSetPinVal+0x1f0>
    1c0c:	80 95       	com	r24
    1c0e:	84 23       	and	r24, r20
    1c10:	8c 93       	st	X, r24
					}
				}
			}
		}
	}
    1c12:	27 96       	adiw	r28, 0x07	; 7
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <DIO_u8GetPinVal>:

	u8 DIO_u8GetPinVal(u8 DIO_u8Port,u8 DIO_u8Pin)
	{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <DIO_u8GetPinVal+0x6>
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <DIO_u8GetPinVal+0x8>
    1c2c:	0f 92       	push	r0
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	8a 83       	std	Y+2, r24	; 0x02
    1c34:	6b 83       	std	Y+3, r22	; 0x03
		u8 Localu8Reading=0;
    1c36:	19 82       	std	Y+1, r1	; 0x01
		if(DIO_u8Pin<=7)
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	88 30       	cpi	r24, 0x08	; 8
    1c3c:	08 f0       	brcs	.+2      	; 0x1c40 <DIO_u8GetPinVal+0x1c>
    1c3e:	67 c0       	rjmp	.+206    	; 0x1d0e <DIO_u8GetPinVal+0xea>
		{
			switch(DIO_u8Port)
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	3d 83       	std	Y+5, r19	; 0x05
    1c48:	2c 83       	std	Y+4, r18	; 0x04
    1c4a:	4c 81       	ldd	r20, Y+4	; 0x04
    1c4c:	5d 81       	ldd	r21, Y+5	; 0x05
    1c4e:	41 30       	cpi	r20, 0x01	; 1
    1c50:	51 05       	cpc	r21, r1
    1c52:	41 f1       	breq	.+80     	; 0x1ca4 <DIO_u8GetPinVal+0x80>
    1c54:	8c 81       	ldd	r24, Y+4	; 0x04
    1c56:	9d 81       	ldd	r25, Y+5	; 0x05
    1c58:	82 30       	cpi	r24, 0x02	; 2
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	34 f4       	brge	.+12     	; 0x1c6a <DIO_u8GetPinVal+0x46>
    1c5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c60:	3d 81       	ldd	r19, Y+5	; 0x05
    1c62:	21 15       	cp	r18, r1
    1c64:	31 05       	cpc	r19, r1
    1c66:	61 f0       	breq	.+24     	; 0x1c80 <DIO_u8GetPinVal+0x5c>
    1c68:	52 c0       	rjmp	.+164    	; 0x1d0e <DIO_u8GetPinVal+0xea>
    1c6a:	4c 81       	ldd	r20, Y+4	; 0x04
    1c6c:	5d 81       	ldd	r21, Y+5	; 0x05
    1c6e:	42 30       	cpi	r20, 0x02	; 2
    1c70:	51 05       	cpc	r21, r1
    1c72:	51 f1       	breq	.+84     	; 0x1cc8 <DIO_u8GetPinVal+0xa4>
    1c74:	8c 81       	ldd	r24, Y+4	; 0x04
    1c76:	9d 81       	ldd	r25, Y+5	; 0x05
    1c78:	83 30       	cpi	r24, 0x03	; 3
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	b9 f1       	breq	.+110    	; 0x1cec <DIO_u8GetPinVal+0xc8>
    1c7e:	47 c0       	rjmp	.+142    	; 0x1d0e <DIO_u8GetPinVal+0xea>
			{
			case DIO_PORTA:Localu8Reading=GET_BIT(PINA,DIO_u8Pin);break;
    1c80:	e9 e3       	ldi	r30, 0x39	; 57
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a9 01       	movw	r20, r18
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <DIO_u8GetPinVal+0x74>
    1c94:	55 95       	asr	r21
    1c96:	47 95       	ror	r20
    1c98:	8a 95       	dec	r24
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <DIO_u8GetPinVal+0x70>
    1c9c:	ca 01       	movw	r24, r20
    1c9e:	81 70       	andi	r24, 0x01	; 1
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	35 c0       	rjmp	.+106    	; 0x1d0e <DIO_u8GetPinVal+0xea>
			case DIO_PORTB:Localu8Reading=GET_BIT(PINB,DIO_u8Pin);break;
    1ca4:	e6 e3       	ldi	r30, 0x36	; 54
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	a9 01       	movw	r20, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <DIO_u8GetPinVal+0x98>
    1cb8:	55 95       	asr	r21
    1cba:	47 95       	ror	r20
    1cbc:	8a 95       	dec	r24
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <DIO_u8GetPinVal+0x94>
    1cc0:	ca 01       	movw	r24, r20
    1cc2:	81 70       	andi	r24, 0x01	; 1
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	23 c0       	rjmp	.+70     	; 0x1d0e <DIO_u8GetPinVal+0xea>
			case DIO_PORTC:Localu8Reading=GET_BIT(PINC,DIO_u8Pin);break;
    1cc8:	e3 e3       	ldi	r30, 0x33	; 51
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	88 2f       	mov	r24, r24
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	a9 01       	movw	r20, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <DIO_u8GetPinVal+0xbc>
    1cdc:	55 95       	asr	r21
    1cde:	47 95       	ror	r20
    1ce0:	8a 95       	dec	r24
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <DIO_u8GetPinVal+0xb8>
    1ce4:	ca 01       	movw	r24, r20
    1ce6:	81 70       	andi	r24, 0x01	; 1
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	11 c0       	rjmp	.+34     	; 0x1d0e <DIO_u8GetPinVal+0xea>
			case DIO_PORTD:Localu8Reading=GET_BIT(PIND,DIO_u8Pin);break;
    1cec:	e0 e3       	ldi	r30, 0x30	; 48
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a9 01       	movw	r20, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <DIO_u8GetPinVal+0xe0>
    1d00:	55 95       	asr	r21
    1d02:	47 95       	ror	r20
    1d04:	8a 95       	dec	r24
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <DIO_u8GetPinVal+0xdc>
    1d08:	ca 01       	movw	r24, r20
    1d0a:	81 70       	andi	r24, 0x01	; 1
    1d0c:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		return Localu8Reading;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <KPD_voidInit>:
#include "KEYPAD_interface.h"
#include "KEYPAD_config.h"
#include "KEYPAD_private.h"

void KPD_voidInit(void)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
   //ROWS INPUT PULLUP
	DIO_voidSetPinDir(KPAD_PORT,DIO_PIN_DIR_IN,KPAD_R0);
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	44 e0       	ldi	r20, 0x04	; 4
    1d2e:	0e 94 06 0c 	call	0x180c	; 0x180c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(KPAD_PORT,DIO_PIN_DIR_IN,KPAD_R1);
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	60 e0       	ldi	r22, 0x00	; 0
    1d36:	45 e0       	ldi	r20, 0x05	; 5
    1d38:	0e 94 06 0c 	call	0x180c	; 0x180c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(KPAD_PORT,DIO_PIN_DIR_IN,KPAD_R2);
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	46 e0       	ldi	r20, 0x06	; 6
    1d42:	0e 94 06 0c 	call	0x180c	; 0x180c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(KPAD_PORT,DIO_PIN_DIR_IN,KPAD_R3);
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	47 e0       	ldi	r20, 0x07	; 7
    1d4c:	0e 94 06 0c 	call	0x180c	; 0x180c <DIO_voidSetPinDir>

	DIO_voidSetPinVal(KPAD_PORT,DIO_PIN_VAL_HIGH,KPAD_R0);
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	61 e0       	ldi	r22, 0x01	; 1
    1d54:	44 e0       	ldi	r20, 0x04	; 4
    1d56:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(KPAD_PORT,DIO_PIN_VAL_HIGH,KPAD_R1);
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	61 e0       	ldi	r22, 0x01	; 1
    1d5e:	45 e0       	ldi	r20, 0x05	; 5
    1d60:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(KPAD_PORT,DIO_PIN_VAL_HIGH,KPAD_R2);
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	61 e0       	ldi	r22, 0x01	; 1
    1d68:	46 e0       	ldi	r20, 0x06	; 6
    1d6a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(KPAD_PORT,DIO_PIN_VAL_HIGH,KPAD_R3);
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	61 e0       	ldi	r22, 0x01	; 1
    1d72:	47 e0       	ldi	r20, 0x07	; 7
    1d74:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>


	//COLS OUTPUT HIGH
	DIO_voidSetPinDir(KPAD_PORT,DIO_PIN_DIR_OUT,KPAD_C0);
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	61 e0       	ldi	r22, 0x01	; 1
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	0e 94 06 0c 	call	0x180c	; 0x180c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(KPAD_PORT,DIO_PIN_DIR_OUT,KPAD_C1);
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	61 e0       	ldi	r22, 0x01	; 1
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 06 0c 	call	0x180c	; 0x180c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(KPAD_PORT,DIO_PIN_DIR_OUT,KPAD_C2);
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	61 e0       	ldi	r22, 0x01	; 1
    1d90:	42 e0       	ldi	r20, 0x02	; 2
    1d92:	0e 94 06 0c 	call	0x180c	; 0x180c <DIO_voidSetPinDir>
	DIO_voidSetPinDir(KPAD_PORT,DIO_PIN_DIR_OUT,KPAD_C3);
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	61 e0       	ldi	r22, 0x01	; 1
    1d9a:	43 e0       	ldi	r20, 0x03	; 3
    1d9c:	0e 94 06 0c 	call	0x180c	; 0x180c <DIO_voidSetPinDir>

	DIO_voidSetPinVal(KPAD_PORT,DIO_PIN_VAL_HIGH,KPAD_C0);
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	61 e0       	ldi	r22, 0x01	; 1
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(KPAD_PORT,DIO_PIN_VAL_HIGH,KPAD_C1);
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	61 e0       	ldi	r22, 0x01	; 1
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(KPAD_PORT,DIO_PIN_VAL_HIGH,KPAD_C2);
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	61 e0       	ldi	r22, 0x01	; 1
    1db8:	42 e0       	ldi	r20, 0x02	; 2
    1dba:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(KPAD_PORT,DIO_PIN_VAL_HIGH,KPAD_C3);
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	61 e0       	ldi	r22, 0x01	; 1
    1dc2:	43 e0       	ldi	r20, 0x03	; 3
    1dc4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>

}
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <KPD_u8Getkey>:



u8 KPD_u8Getkey(void)
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	62 97       	sbiw	r28, 0x12	; 18
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61

	    u8 Local_u8RetrunedValue = 255 ;
    1de2:	8f ef       	ldi	r24, 0xFF	; 255
    1de4:	8a 8b       	std	Y+18, r24	; 0x12
	    u8 Local_u8GetPressed   ;
	    u8 Local_u8Col            ;
	    u8 Local_u8Row          ;

	    for(Local_u8Col = 0 + KPAD_COL_INIT ; Local_u8Col < KPAD_COL_END + 1 ; Local_u8Col++ )
    1de6:	84 e0       	ldi	r24, 0x04	; 4
    1de8:	88 8b       	std	Y+16, r24	; 0x10
    1dea:	b7 c0       	rjmp	.+366    	; 0x1f5a <KPD_u8Getkey+0x18c>
	    {
	        DIO_voidSetPinVal(KPAD_PORT , Local_u8Col , DIO_PIN_VAL_LOW);
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	68 89       	ldd	r22, Y+16	; 0x10
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
	        for(Local_u8Row = 0 + KPAD_ROW_INIT ; Local_u8Row < KPAD_ROW_END + 1 ; Local_u8Row++)
    1df6:	1f 86       	std	Y+15, r1	; 0x0f
    1df8:	a4 c0       	rjmp	.+328    	; 0x1f42 <KPD_u8Getkey+0x174>
	        {

	           Local_u8GetPressed = DIO_u8GetPinVal(KPAD_PORT , Local_u8Row);
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dfe:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <DIO_u8GetPinVal>
    1e02:	89 8b       	std	Y+17, r24	; 0x11
	           if(Local_u8GetPressed == 0)
    1e04:	89 89       	ldd	r24, Y+17	; 0x11
    1e06:	88 23       	and	r24, r24
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <KPD_u8Getkey+0x3e>
    1e0a:	98 c0       	rjmp	.+304    	; 0x1f3c <KPD_u8Getkey+0x16e>
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a8 e4       	ldi	r26, 0x48	; 72
    1e12:	b2 e4       	ldi	r27, 0x42	; 66
    1e14:	8b 87       	std	Y+11, r24	; 0x0b
    1e16:	9c 87       	std	Y+12, r25	; 0x0c
    1e18:	ad 87       	std	Y+13, r26	; 0x0d
    1e1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	4a ef       	ldi	r20, 0xFA	; 250
    1e2a:	54 e4       	ldi	r21, 0x44	; 68
    1e2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	8f 83       	std	Y+7, r24	; 0x07
    1e36:	98 87       	std	Y+8, r25	; 0x08
    1e38:	a9 87       	std	Y+9, r26	; 0x09
    1e3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3e:	78 85       	ldd	r23, Y+8	; 0x08
    1e40:	89 85       	ldd	r24, Y+9	; 0x09
    1e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e8       	ldi	r20, 0x80	; 128
    1e4a:	5f e3       	ldi	r21, 0x3F	; 63
    1e4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e50:	88 23       	and	r24, r24
    1e52:	2c f4       	brge	.+10     	; 0x1e5e <KPD_u8Getkey+0x90>
		__ticks = 1;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	9e 83       	std	Y+6, r25	; 0x06
    1e5a:	8d 83       	std	Y+5, r24	; 0x05
    1e5c:	3f c0       	rjmp	.+126    	; 0x1edc <KPD_u8Getkey+0x10e>
	else if (__tmp > 65535)
    1e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e60:	78 85       	ldd	r23, Y+8	; 0x08
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	3f ef       	ldi	r19, 0xFF	; 255
    1e6a:	4f e7       	ldi	r20, 0x7F	; 127
    1e6c:	57 e4       	ldi	r21, 0x47	; 71
    1e6e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e72:	18 16       	cp	r1, r24
    1e74:	4c f5       	brge	.+82     	; 0x1ec8 <KPD_u8Getkey+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e2       	ldi	r20, 0x20	; 32
    1e84:	51 e4       	ldi	r21, 0x41	; 65
    1e86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9e 83       	std	Y+6, r25	; 0x06
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
    1e9e:	0f c0       	rjmp	.+30     	; 0x1ebe <KPD_u8Getkey+0xf0>
    1ea0:	88 ec       	ldi	r24, 0xC8	; 200
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9c 83       	std	Y+4, r25	; 0x04
    1ea6:	8b 83       	std	Y+3, r24	; 0x03
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <KPD_u8Getkey+0xde>
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	69 f7       	brne	.-38     	; 0x1ea0 <KPD_u8Getkey+0xd2>
    1ec6:	14 c0       	rjmp	.+40     	; 0x1ef0 <KPD_u8Getkey+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eca:	78 85       	ldd	r23, Y+8	; 0x08
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <KPD_u8Getkey+0x11a>
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
	           {
	            /*  Debouncing */
	            _delay_ms(50);
	            Local_u8GetPressed = DIO_u8GetPinVal(KPAD_PORT , Local_u8Row);
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ef4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <DIO_u8GetPinVal>
    1ef8:	89 8b       	std	Y+17, r24	; 0x11
	            if(Local_u8GetPressed == 0)
    1efa:	89 89       	ldd	r24, Y+17	; 0x11
    1efc:	88 23       	and	r24, r24
    1efe:	d9 f4       	brne	.+54     	; 0x1f36 <KPD_u8Getkey+0x168>
	            {
	                Local_u8RetrunedValue = KPAD_Au8Values[Local_u8Row - KPAD_ROW_INIT][Local_u8Col - KPAD_COL_INIT];
    1f00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f02:	48 2f       	mov	r20, r24
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	88 89       	ldd	r24, Y+16	; 0x10
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9c 01       	movw	r18, r24
    1f0e:	24 50       	subi	r18, 0x04	; 4
    1f10:	30 40       	sbci	r19, 0x00	; 0
    1f12:	ca 01       	movw	r24, r20
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	82 0f       	add	r24, r18
    1f1e:	93 1f       	adc	r25, r19
    1f20:	fc 01       	movw	r30, r24
    1f22:	ea 56       	subi	r30, 0x6A	; 106
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	80 81       	ld	r24, Z
    1f28:	8a 8b       	std	Y+18, r24	; 0x12
    1f2a:	05 c0       	rjmp	.+10     	; 0x1f36 <KPD_u8Getkey+0x168>
	            }
	            while(Local_u8GetPressed ==0 )
	            {
	                Local_u8GetPressed = DIO_u8GetPinVal(KPAD_PORT , Local_u8Row);
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f30:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <DIO_u8GetPinVal>
    1f34:	89 8b       	std	Y+17, r24	; 0x11
	            Local_u8GetPressed = DIO_u8GetPinVal(KPAD_PORT , Local_u8Row);
	            if(Local_u8GetPressed == 0)
	            {
	                Local_u8RetrunedValue = KPAD_Au8Values[Local_u8Row - KPAD_ROW_INIT][Local_u8Col - KPAD_COL_INIT];
	            }
	            while(Local_u8GetPressed ==0 )
    1f36:	89 89       	ldd	r24, Y+17	; 0x11
    1f38:	88 23       	and	r24, r24
    1f3a:	c1 f3       	breq	.-16     	; 0x1f2c <KPD_u8Getkey+0x15e>
	    u8 Local_u8Row          ;

	    for(Local_u8Col = 0 + KPAD_COL_INIT ; Local_u8Col < KPAD_COL_END + 1 ; Local_u8Col++ )
	    {
	        DIO_voidSetPinVal(KPAD_PORT , Local_u8Col , DIO_PIN_VAL_LOW);
	        for(Local_u8Row = 0 + KPAD_ROW_INIT ; Local_u8Row < KPAD_ROW_END + 1 ; Local_u8Row++)
    1f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3e:	8f 5f       	subi	r24, 0xFF	; 255
    1f40:	8f 87       	std	Y+15, r24	; 0x0f
    1f42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f44:	84 30       	cpi	r24, 0x04	; 4
    1f46:	08 f4       	brcc	.+2      	; 0x1f4a <KPD_u8Getkey+0x17c>
    1f48:	58 cf       	rjmp	.-336    	; 0x1dfa <KPD_u8Getkey+0x2c>

	           }

	        }

	        DIO_voidSetPinVal(KPAD_PORT , Local_u8Col , DIO_PIN_VAL_HIGH);
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	68 89       	ldd	r22, Y+16	; 0x10
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_voidSetPinVal>
	    u8 Local_u8RetrunedValue = 255 ;
	    u8 Local_u8GetPressed   ;
	    u8 Local_u8Col            ;
	    u8 Local_u8Row          ;

	    for(Local_u8Col = 0 + KPAD_COL_INIT ; Local_u8Col < KPAD_COL_END + 1 ; Local_u8Col++ )
    1f54:	88 89       	ldd	r24, Y+16	; 0x10
    1f56:	8f 5f       	subi	r24, 0xFF	; 255
    1f58:	88 8b       	std	Y+16, r24	; 0x10
    1f5a:	88 89       	ldd	r24, Y+16	; 0x10
    1f5c:	88 30       	cpi	r24, 0x08	; 8
    1f5e:	08 f4       	brcc	.+2      	; 0x1f62 <KPD_u8Getkey+0x194>
    1f60:	45 cf       	rjmp	.-374    	; 0x1dec <KPD_u8Getkey+0x1e>

	        DIO_voidSetPinVal(KPAD_PORT , Local_u8Col , DIO_PIN_VAL_HIGH);
	    }


	    return Local_u8RetrunedValue ;
    1f62:	8a 89       	ldd	r24, Y+18	; 0x12

}
    1f64:	62 96       	adiw	r28, 0x12	; 18
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <main>:
#include "CLCL_interface.h"

#include "KEYPAD_Interface.h"

int main()
{
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	c5 5e       	subi	r28, 0xE5	; 229
    1f84:	d0 40       	sbci	r29, 0x00	; 0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidInit();
    1f90:	0e 94 d7 06 	call	0xdae	; 0xdae <CLCD_voidInit>
	KPD_voidInit();
    1f94:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <KPD_voidInit>
	u8 count;
	u8 c = 0;
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e7 53       	subi	r30, 0x37	; 55
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	10 82       	st	Z, r1

	u8 Local_u8PressedKey;
	u8 pressed_Keys[10];
	u8 pass[10] = "arefmm";
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	8b 52       	subi	r24, 0x2B	; 43
    1fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa6:	c1 52       	subi	r28, 0x21	; 33
    1fa8:	df 4f       	sbci	r29, 0xFF	; 255
    1faa:	99 83       	std	Y+1, r25	; 0x01
    1fac:	88 83       	st	Y, r24
    1fae:	cf 5d       	subi	r28, 0xDF	; 223
    1fb0:	d0 40       	sbci	r29, 0x00	; 0
    1fb2:	c1 52       	subi	r28, 0x21	; 33
    1fb4:	df 4f       	sbci	r29, 0xFF	; 255
    1fb6:	a8 81       	ld	r26, Y
    1fb8:	b9 81       	ldd	r27, Y+1	; 0x01
    1fba:	cf 5d       	subi	r28, 0xDF	; 223
    1fbc:	d0 40       	sbci	r29, 0x00	; 0
    1fbe:	cf 51       	subi	r28, 0x1F	; 31
    1fc0:	df 4f       	sbci	r29, 0xFF	; 255
    1fc2:	b9 83       	std	Y+1, r27	; 0x01
    1fc4:	a8 83       	st	Y, r26
    1fc6:	c1 5e       	subi	r28, 0xE1	; 225
    1fc8:	d0 40       	sbci	r29, 0x00	; 0
    1fca:	e4 e8       	ldi	r30, 0x84	; 132
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	cd 51       	subi	r28, 0x1D	; 29
    1fd0:	df 4f       	sbci	r29, 0xFF	; 255
    1fd2:	f9 83       	std	Y+1, r31	; 0x01
    1fd4:	e8 83       	st	Y, r30
    1fd6:	c3 5e       	subi	r28, 0xE3	; 227
    1fd8:	d0 40       	sbci	r29, 0x00	; 0
    1fda:	f7 e0       	ldi	r31, 0x07	; 7
    1fdc:	cb 51       	subi	r28, 0x1B	; 27
    1fde:	df 4f       	sbci	r29, 0xFF	; 255
    1fe0:	f8 83       	st	Y, r31
    1fe2:	c5 5e       	subi	r28, 0xE5	; 229
    1fe4:	d0 40       	sbci	r29, 0x00	; 0
    1fe6:	cd 51       	subi	r28, 0x1D	; 29
    1fe8:	df 4f       	sbci	r29, 0xFF	; 255
    1fea:	a8 81       	ld	r26, Y
    1fec:	b9 81       	ldd	r27, Y+1	; 0x01
    1fee:	c3 5e       	subi	r28, 0xE3	; 227
    1ff0:	d0 40       	sbci	r29, 0x00	; 0
    1ff2:	0c 90       	ld	r0, X
    1ff4:	cd 51       	subi	r28, 0x1D	; 29
    1ff6:	df 4f       	sbci	r29, 0xFF	; 255
    1ff8:	e8 81       	ld	r30, Y
    1ffa:	f9 81       	ldd	r31, Y+1	; 0x01
    1ffc:	c3 5e       	subi	r28, 0xE3	; 227
    1ffe:	d0 40       	sbci	r29, 0x00	; 0
    2000:	31 96       	adiw	r30, 0x01	; 1
    2002:	cd 51       	subi	r28, 0x1D	; 29
    2004:	df 4f       	sbci	r29, 0xFF	; 255
    2006:	f9 83       	std	Y+1, r31	; 0x01
    2008:	e8 83       	st	Y, r30
    200a:	c3 5e       	subi	r28, 0xE3	; 227
    200c:	d0 40       	sbci	r29, 0x00	; 0
    200e:	cf 51       	subi	r28, 0x1F	; 31
    2010:	df 4f       	sbci	r29, 0xFF	; 255
    2012:	a8 81       	ld	r26, Y
    2014:	b9 81       	ldd	r27, Y+1	; 0x01
    2016:	c1 5e       	subi	r28, 0xE1	; 225
    2018:	d0 40       	sbci	r29, 0x00	; 0
    201a:	0c 92       	st	X, r0
    201c:	cf 51       	subi	r28, 0x1F	; 31
    201e:	df 4f       	sbci	r29, 0xFF	; 255
    2020:	e8 81       	ld	r30, Y
    2022:	f9 81       	ldd	r31, Y+1	; 0x01
    2024:	c1 5e       	subi	r28, 0xE1	; 225
    2026:	d0 40       	sbci	r29, 0x00	; 0
    2028:	31 96       	adiw	r30, 0x01	; 1
    202a:	cf 51       	subi	r28, 0x1F	; 31
    202c:	df 4f       	sbci	r29, 0xFF	; 255
    202e:	f9 83       	std	Y+1, r31	; 0x01
    2030:	e8 83       	st	Y, r30
    2032:	c1 5e       	subi	r28, 0xE1	; 225
    2034:	d0 40       	sbci	r29, 0x00	; 0
    2036:	cb 51       	subi	r28, 0x1B	; 27
    2038:	df 4f       	sbci	r29, 0xFF	; 255
    203a:	f8 81       	ld	r31, Y
    203c:	c5 5e       	subi	r28, 0xE5	; 229
    203e:	d0 40       	sbci	r29, 0x00	; 0
    2040:	f1 50       	subi	r31, 0x01	; 1
    2042:	cb 51       	subi	r28, 0x1B	; 27
    2044:	df 4f       	sbci	r29, 0xFF	; 255
    2046:	f8 83       	st	Y, r31
    2048:	c5 5e       	subi	r28, 0xE5	; 229
    204a:	d0 40       	sbci	r29, 0x00	; 0
    204c:	cb 51       	subi	r28, 0x1B	; 27
    204e:	df 4f       	sbci	r29, 0xFF	; 255
    2050:	88 81       	ld	r24, Y
    2052:	c5 5e       	subi	r28, 0xE5	; 229
    2054:	d0 40       	sbci	r29, 0x00	; 0
    2056:	88 23       	and	r24, r24
    2058:	31 f6       	brne	.-116    	; 0x1fe6 <main+0x70>
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	c1 52       	subi	r28, 0x21	; 33
    205e:	df 4f       	sbci	r29, 0xFF	; 255
    2060:	e8 81       	ld	r30, Y
    2062:	f9 81       	ldd	r31, Y+1	; 0x01
    2064:	cf 5d       	subi	r28, 0xDF	; 223
    2066:	d0 40       	sbci	r29, 0x00	; 0
    2068:	37 96       	adiw	r30, 0x07	; 7
    206a:	df 01       	movw	r26, r30
    206c:	98 2f       	mov	r25, r24
    206e:	1d 92       	st	X+, r1
    2070:	9a 95       	dec	r25
    2072:	e9 f7       	brne	.-6      	; 0x206e <main+0xf8>

	CLCD_voidSendData('*');
    2074:	8a e2       	ldi	r24, 0x2A	; 42
    2076:	0e 94 39 06 	call	0xc72	; 0xc72 <CLCD_voidSendData>

	while(1)
	{

		u8 key_Pressed = KPD_u8Getkey();
    207a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <KPD_u8Getkey>
    207e:	fe 01       	movw	r30, r28
    2080:	e9 53       	subi	r30, 0x39	; 57
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	80 83       	st	Z, r24
    2086:	fe 01       	movw	r30, r28
    2088:	ef 53       	subi	r30, 0x3F	; 63
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	a6 e9       	ldi	r26, 0x96	; 150
    2092:	b3 e4       	ldi	r27, 0x43	; 67
    2094:	80 83       	st	Z, r24
    2096:	91 83       	std	Z+1, r25	; 0x01
    2098:	a2 83       	std	Z+2, r26	; 0x02
    209a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209c:	8e 01       	movw	r16, r28
    209e:	03 54       	subi	r16, 0x43	; 67
    20a0:	1f 4f       	sbci	r17, 0xFF	; 255
    20a2:	fe 01       	movw	r30, r28
    20a4:	ef 53       	subi	r30, 0x3F	; 63
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	4a ef       	ldi	r20, 0xFA	; 250
    20b6:	54 e4       	ldi	r21, 0x44	; 68
    20b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	f8 01       	movw	r30, r16
    20c2:	80 83       	st	Z, r24
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	a2 83       	std	Z+2, r26	; 0x02
    20c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ca:	fe 01       	movw	r30, r28
    20cc:	e3 54       	subi	r30, 0x43	; 67
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	60 81       	ld	r22, Z
    20d2:	71 81       	ldd	r23, Z+1	; 0x01
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	93 81       	ldd	r25, Z+3	; 0x03
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20e4:	88 23       	and	r24, r24
    20e6:	44 f4       	brge	.+16     	; 0x20f8 <main+0x182>
		__ticks = 1;
    20e8:	fe 01       	movw	r30, r28
    20ea:	e5 54       	subi	r30, 0x45	; 69
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	80 83       	st	Z, r24
    20f6:	64 c0       	rjmp	.+200    	; 0x21c0 <main+0x24a>
	else if (__tmp > 65535)
    20f8:	fe 01       	movw	r30, r28
    20fa:	e3 54       	subi	r30, 0x43	; 67
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	60 81       	ld	r22, Z
    2100:	71 81       	ldd	r23, Z+1	; 0x01
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	0c f0       	brlt	.+2      	; 0x2118 <main+0x1a2>
    2116:	43 c0       	rjmp	.+134    	; 0x219e <main+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2118:	fe 01       	movw	r30, r28
    211a:	ef 53       	subi	r30, 0x3F	; 63
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e2       	ldi	r20, 0x20	; 32
    212c:	51 e4       	ldi	r21, 0x41	; 65
    212e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	8e 01       	movw	r16, r28
    2138:	05 54       	subi	r16, 0x45	; 69
    213a:	1f 4f       	sbci	r17, 0xFF	; 255
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	f8 01       	movw	r30, r16
    214a:	91 83       	std	Z+1, r25	; 0x01
    214c:	80 83       	st	Z, r24
    214e:	1f c0       	rjmp	.+62     	; 0x218e <main+0x218>
    2150:	fe 01       	movw	r30, r28
    2152:	e7 54       	subi	r30, 0x47	; 71
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	88 ec       	ldi	r24, 0xC8	; 200
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	91 83       	std	Z+1, r25	; 0x01
    215c:	80 83       	st	Z, r24
    215e:	fe 01       	movw	r30, r28
    2160:	e7 54       	subi	r30, 0x47	; 71
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	80 81       	ld	r24, Z
    2166:	91 81       	ldd	r25, Z+1	; 0x01
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <main+0x1f2>
    216c:	fe 01       	movw	r30, r28
    216e:	e7 54       	subi	r30, 0x47	; 71
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2176:	de 01       	movw	r26, r28
    2178:	a5 54       	subi	r26, 0x45	; 69
    217a:	bf 4f       	sbci	r27, 0xFF	; 255
    217c:	fe 01       	movw	r30, r28
    217e:	e5 54       	subi	r30, 0x45	; 69
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 81       	ld	r24, Z
    2184:	91 81       	ldd	r25, Z+1	; 0x01
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	11 96       	adiw	r26, 0x01	; 1
    218a:	9c 93       	st	X, r25
    218c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	fe 01       	movw	r30, r28
    2190:	e5 54       	subi	r30, 0x45	; 69
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	80 81       	ld	r24, Z
    2196:	91 81       	ldd	r25, Z+1	; 0x01
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	d1 f6       	brne	.-76     	; 0x2150 <main+0x1da>
    219c:	28 c0       	rjmp	.+80     	; 0x21ee <main+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	8e 01       	movw	r16, r28
    21a0:	05 54       	subi	r16, 0x45	; 69
    21a2:	1f 4f       	sbci	r17, 0xFF	; 255
    21a4:	fe 01       	movw	r30, r28
    21a6:	e3 54       	subi	r30, 0x43	; 67
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	60 81       	ld	r22, Z
    21ac:	71 81       	ldd	r23, Z+1	; 0x01
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	93 81       	ldd	r25, Z+3	; 0x03
    21b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	f8 01       	movw	r30, r16
    21bc:	91 83       	std	Z+1, r25	; 0x01
    21be:	80 83       	st	Z, r24
    21c0:	de 01       	movw	r26, r28
    21c2:	a9 54       	subi	r26, 0x49	; 73
    21c4:	bf 4f       	sbci	r27, 0xFF	; 255
    21c6:	fe 01       	movw	r30, r28
    21c8:	e5 54       	subi	r30, 0x45	; 69
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	80 81       	ld	r24, Z
    21ce:	91 81       	ldd	r25, Z+1	; 0x01
    21d0:	11 96       	adiw	r26, 0x01	; 1
    21d2:	9c 93       	st	X, r25
    21d4:	8e 93       	st	-X, r24
    21d6:	fe 01       	movw	r30, r28
    21d8:	e9 54       	subi	r30, 0x49	; 73
    21da:	ff 4f       	sbci	r31, 0xFF	; 255
    21dc:	80 81       	ld	r24, Z
    21de:	91 81       	ldd	r25, Z+1	; 0x01
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <main+0x26a>
    21e4:	fe 01       	movw	r30, r28
    21e6:	e9 54       	subi	r30, 0x49	; 73
    21e8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	80 83       	st	Z, r24
		_delay_ms(300);

				if(key_Pressed == 1){
    21ee:	fe 01       	movw	r30, r28
    21f0:	e9 53       	subi	r30, 0x39	; 57
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 81       	ld	r24, Z
    21f6:	81 30       	cpi	r24, 0x01	; 1
    21f8:	09 f0       	breq	.+2      	; 0x21fc <main+0x286>
    21fa:	ce c0       	rjmp	.+412    	; 0x2398 <main+0x422>
					LCD_displayCharacter('*');
    21fc:	8a e2       	ldi	r24, 0x2A	; 42
    21fe:	0e 94 1f 09 	call	0x123e	; 0x123e <LCD_displayCharacter>
					pressed_Keys[c] = '1';
    2202:	fe 01       	movw	r30, r28
    2204:	e7 53       	subi	r30, 0x37	; 55
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 81       	ld	r24, Z
    220a:	28 2f       	mov	r18, r24
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	ce 01       	movw	r24, r28
    2210:	85 53       	subi	r24, 0x35	; 53
    2212:	9f 4f       	sbci	r25, 0xFF	; 255
    2214:	fc 01       	movw	r30, r24
    2216:	e2 0f       	add	r30, r18
    2218:	f3 1f       	adc	r31, r19
    221a:	81 e3       	ldi	r24, 0x31	; 49
    221c:	80 83       	st	Z, r24
					c++;
    221e:	de 01       	movw	r26, r28
    2220:	a7 53       	subi	r26, 0x37	; 55
    2222:	bf 4f       	sbci	r27, 0xFF	; 255
    2224:	fe 01       	movw	r30, r28
    2226:	e7 53       	subi	r30, 0x37	; 55
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	8f 5f       	subi	r24, 0xFF	; 255
    222e:	8c 93       	st	X, r24
    2230:	fe 01       	movw	r30, r28
    2232:	ed 54       	subi	r30, 0x4D	; 77
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	ac e0       	ldi	r26, 0x0C	; 12
    223c:	b2 e4       	ldi	r27, 0x42	; 66
    223e:	80 83       	st	Z, r24
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	a2 83       	std	Z+2, r26	; 0x02
    2244:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2246:	8e 01       	movw	r16, r28
    2248:	01 55       	subi	r16, 0x51	; 81
    224a:	1f 4f       	sbci	r17, 0xFF	; 255
    224c:	fe 01       	movw	r30, r28
    224e:	ed 54       	subi	r30, 0x4D	; 77
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	60 81       	ld	r22, Z
    2254:	71 81       	ldd	r23, Z+1	; 0x01
    2256:	82 81       	ldd	r24, Z+2	; 0x02
    2258:	93 81       	ldd	r25, Z+3	; 0x03
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4a ef       	ldi	r20, 0xFA	; 250
    2260:	54 e4       	ldi	r21, 0x44	; 68
    2262:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	f8 01       	movw	r30, r16
    226c:	80 83       	st	Z, r24
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	a2 83       	std	Z+2, r26	; 0x02
    2272:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2274:	fe 01       	movw	r30, r28
    2276:	e1 55       	subi	r30, 0x51	; 81
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	60 81       	ld	r22, Z
    227c:	71 81       	ldd	r23, Z+1	; 0x01
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	93 81       	ldd	r25, Z+3	; 0x03
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e8       	ldi	r20, 0x80	; 128
    2288:	5f e3       	ldi	r21, 0x3F	; 63
    228a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    228e:	88 23       	and	r24, r24
    2290:	44 f4       	brge	.+16     	; 0x22a2 <main+0x32c>
		__ticks = 1;
    2292:	fe 01       	movw	r30, r28
    2294:	e3 55       	subi	r30, 0x53	; 83
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	80 83       	st	Z, r24
    22a0:	64 c0       	rjmp	.+200    	; 0x236a <main+0x3f4>
	else if (__tmp > 65535)
    22a2:	fe 01       	movw	r30, r28
    22a4:	e1 55       	subi	r30, 0x51	; 81
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	60 81       	ld	r22, Z
    22aa:	71 81       	ldd	r23, Z+1	; 0x01
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	93 81       	ldd	r25, Z+3	; 0x03
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	0c f0       	brlt	.+2      	; 0x22c2 <main+0x34c>
    22c0:	43 c0       	rjmp	.+134    	; 0x2348 <main+0x3d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c2:	fe 01       	movw	r30, r28
    22c4:	ed 54       	subi	r30, 0x4D	; 77
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	60 81       	ld	r22, Z
    22ca:	71 81       	ldd	r23, Z+1	; 0x01
    22cc:	82 81       	ldd	r24, Z+2	; 0x02
    22ce:	93 81       	ldd	r25, Z+3	; 0x03
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	8e 01       	movw	r16, r28
    22e2:	03 55       	subi	r16, 0x53	; 83
    22e4:	1f 4f       	sbci	r17, 0xFF	; 255
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	f8 01       	movw	r30, r16
    22f4:	91 83       	std	Z+1, r25	; 0x01
    22f6:	80 83       	st	Z, r24
    22f8:	1f c0       	rjmp	.+62     	; 0x2338 <main+0x3c2>
    22fa:	fe 01       	movw	r30, r28
    22fc:	e5 55       	subi	r30, 0x55	; 85
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	88 ec       	ldi	r24, 0xC8	; 200
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
    2308:	fe 01       	movw	r30, r28
    230a:	e5 55       	subi	r30, 0x55	; 85
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	91 81       	ldd	r25, Z+1	; 0x01
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <main+0x39c>
    2316:	fe 01       	movw	r30, r28
    2318:	e5 55       	subi	r30, 0x55	; 85
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2320:	de 01       	movw	r26, r28
    2322:	a3 55       	subi	r26, 0x53	; 83
    2324:	bf 4f       	sbci	r27, 0xFF	; 255
    2326:	fe 01       	movw	r30, r28
    2328:	e3 55       	subi	r30, 0x53	; 83
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	11 96       	adiw	r26, 0x01	; 1
    2334:	9c 93       	st	X, r25
    2336:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2338:	fe 01       	movw	r30, r28
    233a:	e3 55       	subi	r30, 0x53	; 83
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	d1 f6       	brne	.-76     	; 0x22fa <main+0x384>
    2346:	28 c0       	rjmp	.+80     	; 0x2398 <main+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	8e 01       	movw	r16, r28
    234a:	03 55       	subi	r16, 0x53	; 83
    234c:	1f 4f       	sbci	r17, 0xFF	; 255
    234e:	fe 01       	movw	r30, r28
    2350:	e1 55       	subi	r30, 0x51	; 81
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	60 81       	ld	r22, Z
    2356:	71 81       	ldd	r23, Z+1	; 0x01
    2358:	82 81       	ldd	r24, Z+2	; 0x02
    235a:	93 81       	ldd	r25, Z+3	; 0x03
    235c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	f8 01       	movw	r30, r16
    2366:	91 83       	std	Z+1, r25	; 0x01
    2368:	80 83       	st	Z, r24
    236a:	de 01       	movw	r26, r28
    236c:	a7 55       	subi	r26, 0x57	; 87
    236e:	bf 4f       	sbci	r27, 0xFF	; 255
    2370:	fe 01       	movw	r30, r28
    2372:	e3 55       	subi	r30, 0x53	; 83
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	80 81       	ld	r24, Z
    2378:	91 81       	ldd	r25, Z+1	; 0x01
    237a:	11 96       	adiw	r26, 0x01	; 1
    237c:	9c 93       	st	X, r25
    237e:	8e 93       	st	-X, r24
    2380:	fe 01       	movw	r30, r28
    2382:	e7 55       	subi	r30, 0x57	; 87
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <main+0x414>
    238e:	fe 01       	movw	r30, r28
    2390:	e7 55       	subi	r30, 0x57	; 87
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	80 83       	st	Z, r24
					_delay_ms(35);
				}

				if(key_Pressed == 2){
    2398:	fe 01       	movw	r30, r28
    239a:	e9 53       	subi	r30, 0x39	; 57
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 81       	ld	r24, Z
    23a0:	82 30       	cpi	r24, 0x02	; 2
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <main+0x430>
    23a4:	ce c0       	rjmp	.+412    	; 0x2542 <main+0x5cc>
					LCD_displayCharacter('*');
    23a6:	8a e2       	ldi	r24, 0x2A	; 42
    23a8:	0e 94 1f 09 	call	0x123e	; 0x123e <LCD_displayCharacter>
					pressed_Keys[c] = '2';
    23ac:	fe 01       	movw	r30, r28
    23ae:	e7 53       	subi	r30, 0x37	; 55
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 81       	ld	r24, Z
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	ce 01       	movw	r24, r28
    23ba:	85 53       	subi	r24, 0x35	; 53
    23bc:	9f 4f       	sbci	r25, 0xFF	; 255
    23be:	fc 01       	movw	r30, r24
    23c0:	e2 0f       	add	r30, r18
    23c2:	f3 1f       	adc	r31, r19
    23c4:	82 e3       	ldi	r24, 0x32	; 50
    23c6:	80 83       	st	Z, r24
					c++;
    23c8:	de 01       	movw	r26, r28
    23ca:	a7 53       	subi	r26, 0x37	; 55
    23cc:	bf 4f       	sbci	r27, 0xFF	; 255
    23ce:	fe 01       	movw	r30, r28
    23d0:	e7 53       	subi	r30, 0x37	; 55
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	8f 5f       	subi	r24, 0xFF	; 255
    23d8:	8c 93       	st	X, r24
    23da:	fe 01       	movw	r30, r28
    23dc:	eb 55       	subi	r30, 0x5B	; 91
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	ac e0       	ldi	r26, 0x0C	; 12
    23e6:	b2 e4       	ldi	r27, 0x42	; 66
    23e8:	80 83       	st	Z, r24
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	a2 83       	std	Z+2, r26	; 0x02
    23ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f0:	8e 01       	movw	r16, r28
    23f2:	0f 55       	subi	r16, 0x5F	; 95
    23f4:	1f 4f       	sbci	r17, 0xFF	; 255
    23f6:	fe 01       	movw	r30, r28
    23f8:	eb 55       	subi	r30, 0x5B	; 91
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	4a ef       	ldi	r20, 0xFA	; 250
    240a:	54 e4       	ldi	r21, 0x44	; 68
    240c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	f8 01       	movw	r30, r16
    2416:	80 83       	st	Z, r24
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	a2 83       	std	Z+2, r26	; 0x02
    241c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    241e:	fe 01       	movw	r30, r28
    2420:	ef 55       	subi	r30, 0x5F	; 95
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e8       	ldi	r20, 0x80	; 128
    2432:	5f e3       	ldi	r21, 0x3F	; 63
    2434:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2438:	88 23       	and	r24, r24
    243a:	44 f4       	brge	.+16     	; 0x244c <main+0x4d6>
		__ticks = 1;
    243c:	fe 01       	movw	r30, r28
    243e:	e1 56       	subi	r30, 0x61	; 97
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	80 83       	st	Z, r24
    244a:	64 c0       	rjmp	.+200    	; 0x2514 <main+0x59e>
	else if (__tmp > 65535)
    244c:	fe 01       	movw	r30, r28
    244e:	ef 55       	subi	r30, 0x5F	; 95
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	60 81       	ld	r22, Z
    2454:	71 81       	ldd	r23, Z+1	; 0x01
    2456:	82 81       	ldd	r24, Z+2	; 0x02
    2458:	93 81       	ldd	r25, Z+3	; 0x03
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	57 e4       	ldi	r21, 0x47	; 71
    2462:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	0c f0       	brlt	.+2      	; 0x246c <main+0x4f6>
    246a:	43 c0       	rjmp	.+134    	; 0x24f2 <main+0x57c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246c:	fe 01       	movw	r30, r28
    246e:	eb 55       	subi	r30, 0x5B	; 91
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	60 81       	ld	r22, Z
    2474:	71 81       	ldd	r23, Z+1	; 0x01
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	93 81       	ldd	r25, Z+3	; 0x03
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	8e 01       	movw	r16, r28
    248c:	01 56       	subi	r16, 0x61	; 97
    248e:	1f 4f       	sbci	r17, 0xFF	; 255
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	f8 01       	movw	r30, r16
    249e:	91 83       	std	Z+1, r25	; 0x01
    24a0:	80 83       	st	Z, r24
    24a2:	1f c0       	rjmp	.+62     	; 0x24e2 <main+0x56c>
    24a4:	fe 01       	movw	r30, r28
    24a6:	e3 56       	subi	r30, 0x63	; 99
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	88 ec       	ldi	r24, 0xC8	; 200
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	80 83       	st	Z, r24
    24b2:	fe 01       	movw	r30, r28
    24b4:	e3 56       	subi	r30, 0x63	; 99
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 81       	ld	r24, Z
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <main+0x546>
    24c0:	fe 01       	movw	r30, r28
    24c2:	e3 56       	subi	r30, 0x63	; 99
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	91 83       	std	Z+1, r25	; 0x01
    24c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ca:	de 01       	movw	r26, r28
    24cc:	a1 56       	subi	r26, 0x61	; 97
    24ce:	bf 4f       	sbci	r27, 0xFF	; 255
    24d0:	fe 01       	movw	r30, r28
    24d2:	e1 56       	subi	r30, 0x61	; 97
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 81       	ld	r24, Z
    24d8:	91 81       	ldd	r25, Z+1	; 0x01
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	11 96       	adiw	r26, 0x01	; 1
    24de:	9c 93       	st	X, r25
    24e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e2:	fe 01       	movw	r30, r28
    24e4:	e1 56       	subi	r30, 0x61	; 97
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	80 81       	ld	r24, Z
    24ea:	91 81       	ldd	r25, Z+1	; 0x01
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	d1 f6       	brne	.-76     	; 0x24a4 <main+0x52e>
    24f0:	28 c0       	rjmp	.+80     	; 0x2542 <main+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	8e 01       	movw	r16, r28
    24f4:	01 56       	subi	r16, 0x61	; 97
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	fe 01       	movw	r30, r28
    24fa:	ef 55       	subi	r30, 0x5F	; 95
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	f8 01       	movw	r30, r16
    2510:	91 83       	std	Z+1, r25	; 0x01
    2512:	80 83       	st	Z, r24
    2514:	de 01       	movw	r26, r28
    2516:	a5 56       	subi	r26, 0x65	; 101
    2518:	bf 4f       	sbci	r27, 0xFF	; 255
    251a:	fe 01       	movw	r30, r28
    251c:	e1 56       	subi	r30, 0x61	; 97
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	80 81       	ld	r24, Z
    2522:	91 81       	ldd	r25, Z+1	; 0x01
    2524:	11 96       	adiw	r26, 0x01	; 1
    2526:	9c 93       	st	X, r25
    2528:	8e 93       	st	-X, r24
    252a:	fe 01       	movw	r30, r28
    252c:	e5 56       	subi	r30, 0x65	; 101
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <main+0x5be>
    2538:	fe 01       	movw	r30, r28
    253a:	e5 56       	subi	r30, 0x65	; 101
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	80 83       	st	Z, r24
					_delay_ms(35);
				}

				if(key_Pressed == 3){
    2542:	fe 01       	movw	r30, r28
    2544:	e9 53       	subi	r30, 0x39	; 57
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	83 30       	cpi	r24, 0x03	; 3
    254c:	09 f0       	breq	.+2      	; 0x2550 <main+0x5da>
    254e:	ce c0       	rjmp	.+412    	; 0x26ec <main+0x776>
					LCD_displayCharacter('*');
    2550:	8a e2       	ldi	r24, 0x2A	; 42
    2552:	0e 94 1f 09 	call	0x123e	; 0x123e <LCD_displayCharacter>
					pressed_Keys[c] = '3';
    2556:	fe 01       	movw	r30, r28
    2558:	e7 53       	subi	r30, 0x37	; 55
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	28 2f       	mov	r18, r24
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	ce 01       	movw	r24, r28
    2564:	85 53       	subi	r24, 0x35	; 53
    2566:	9f 4f       	sbci	r25, 0xFF	; 255
    2568:	fc 01       	movw	r30, r24
    256a:	e2 0f       	add	r30, r18
    256c:	f3 1f       	adc	r31, r19
    256e:	83 e3       	ldi	r24, 0x33	; 51
    2570:	80 83       	st	Z, r24
					c++;
    2572:	de 01       	movw	r26, r28
    2574:	a7 53       	subi	r26, 0x37	; 55
    2576:	bf 4f       	sbci	r27, 0xFF	; 255
    2578:	fe 01       	movw	r30, r28
    257a:	e7 53       	subi	r30, 0x37	; 55
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	8f 5f       	subi	r24, 0xFF	; 255
    2582:	8c 93       	st	X, r24
    2584:	fe 01       	movw	r30, r28
    2586:	e9 56       	subi	r30, 0x69	; 105
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	ac e0       	ldi	r26, 0x0C	; 12
    2590:	b2 e4       	ldi	r27, 0x42	; 66
    2592:	80 83       	st	Z, r24
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	a2 83       	std	Z+2, r26	; 0x02
    2598:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259a:	8e 01       	movw	r16, r28
    259c:	0d 56       	subi	r16, 0x6D	; 109
    259e:	1f 4f       	sbci	r17, 0xFF	; 255
    25a0:	fe 01       	movw	r30, r28
    25a2:	e9 56       	subi	r30, 0x69	; 105
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	60 81       	ld	r22, Z
    25a8:	71 81       	ldd	r23, Z+1	; 0x01
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	93 81       	ldd	r25, Z+3	; 0x03
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	4a ef       	ldi	r20, 0xFA	; 250
    25b4:	54 e4       	ldi	r21, 0x44	; 68
    25b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	f8 01       	movw	r30, r16
    25c0:	80 83       	st	Z, r24
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	a2 83       	std	Z+2, r26	; 0x02
    25c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25c8:	fe 01       	movw	r30, r28
    25ca:	ed 56       	subi	r30, 0x6D	; 109
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	44 f4       	brge	.+16     	; 0x25f6 <main+0x680>
		__ticks = 1;
    25e6:	fe 01       	movw	r30, r28
    25e8:	ef 56       	subi	r30, 0x6F	; 111
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	80 83       	st	Z, r24
    25f4:	64 c0       	rjmp	.+200    	; 0x26be <main+0x748>
	else if (__tmp > 65535)
    25f6:	fe 01       	movw	r30, r28
    25f8:	ed 56       	subi	r30, 0x6D	; 109
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	60 81       	ld	r22, Z
    25fe:	71 81       	ldd	r23, Z+1	; 0x01
    2600:	82 81       	ldd	r24, Z+2	; 0x02
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	3f ef       	ldi	r19, 0xFF	; 255
    2608:	4f e7       	ldi	r20, 0x7F	; 127
    260a:	57 e4       	ldi	r21, 0x47	; 71
    260c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2610:	18 16       	cp	r1, r24
    2612:	0c f0       	brlt	.+2      	; 0x2616 <main+0x6a0>
    2614:	43 c0       	rjmp	.+134    	; 0x269c <main+0x726>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2616:	fe 01       	movw	r30, r28
    2618:	e9 56       	subi	r30, 0x69	; 105
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	82 81       	ldd	r24, Z+2	; 0x02
    2622:	93 81       	ldd	r25, Z+3	; 0x03
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	40 e2       	ldi	r20, 0x20	; 32
    262a:	51 e4       	ldi	r21, 0x41	; 65
    262c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	8e 01       	movw	r16, r28
    2636:	0f 56       	subi	r16, 0x6F	; 111
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	f8 01       	movw	r30, r16
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
    264c:	1f c0       	rjmp	.+62     	; 0x268c <main+0x716>
    264e:	fe 01       	movw	r30, r28
    2650:	e1 57       	subi	r30, 0x71	; 113
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	88 ec       	ldi	r24, 0xC8	; 200
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	80 83       	st	Z, r24
    265c:	fe 01       	movw	r30, r28
    265e:	e1 57       	subi	r30, 0x71	; 113
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <main+0x6f0>
    266a:	fe 01       	movw	r30, r28
    266c:	e1 57       	subi	r30, 0x71	; 113
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2674:	de 01       	movw	r26, r28
    2676:	af 56       	subi	r26, 0x6F	; 111
    2678:	bf 4f       	sbci	r27, 0xFF	; 255
    267a:	fe 01       	movw	r30, r28
    267c:	ef 56       	subi	r30, 0x6F	; 111
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	80 81       	ld	r24, Z
    2682:	91 81       	ldd	r25, Z+1	; 0x01
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	11 96       	adiw	r26, 0x01	; 1
    2688:	9c 93       	st	X, r25
    268a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268c:	fe 01       	movw	r30, r28
    268e:	ef 56       	subi	r30, 0x6F	; 111
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	91 81       	ldd	r25, Z+1	; 0x01
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	d1 f6       	brne	.-76     	; 0x264e <main+0x6d8>
    269a:	28 c0       	rjmp	.+80     	; 0x26ec <main+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269c:	8e 01       	movw	r16, r28
    269e:	0f 56       	subi	r16, 0x6F	; 111
    26a0:	1f 4f       	sbci	r17, 0xFF	; 255
    26a2:	fe 01       	movw	r30, r28
    26a4:	ed 56       	subi	r30, 0x6D	; 109
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	f8 01       	movw	r30, r16
    26ba:	91 83       	std	Z+1, r25	; 0x01
    26bc:	80 83       	st	Z, r24
    26be:	de 01       	movw	r26, r28
    26c0:	a3 57       	subi	r26, 0x73	; 115
    26c2:	bf 4f       	sbci	r27, 0xFF	; 255
    26c4:	fe 01       	movw	r30, r28
    26c6:	ef 56       	subi	r30, 0x6F	; 111
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	11 96       	adiw	r26, 0x01	; 1
    26d0:	9c 93       	st	X, r25
    26d2:	8e 93       	st	-X, r24
    26d4:	fe 01       	movw	r30, r28
    26d6:	e3 57       	subi	r30, 0x73	; 115
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	80 81       	ld	r24, Z
    26dc:	91 81       	ldd	r25, Z+1	; 0x01
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <main+0x768>
    26e2:	fe 01       	movw	r30, r28
    26e4:	e3 57       	subi	r30, 0x73	; 115
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
					_delay_ms(35);
				}

				if(key_Pressed == 4){
    26ec:	fe 01       	movw	r30, r28
    26ee:	e9 53       	subi	r30, 0x39	; 57
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 81       	ld	r24, Z
    26f4:	84 30       	cpi	r24, 0x04	; 4
    26f6:	09 f0       	breq	.+2      	; 0x26fa <main+0x784>
    26f8:	ce c0       	rjmp	.+412    	; 0x2896 <main+0x920>
					LCD_displayCharacter('*');
    26fa:	8a e2       	ldi	r24, 0x2A	; 42
    26fc:	0e 94 1f 09 	call	0x123e	; 0x123e <LCD_displayCharacter>
					pressed_Keys[c] = '4';
    2700:	fe 01       	movw	r30, r28
    2702:	e7 53       	subi	r30, 0x37	; 55
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	ce 01       	movw	r24, r28
    270e:	85 53       	subi	r24, 0x35	; 53
    2710:	9f 4f       	sbci	r25, 0xFF	; 255
    2712:	fc 01       	movw	r30, r24
    2714:	e2 0f       	add	r30, r18
    2716:	f3 1f       	adc	r31, r19
    2718:	84 e3       	ldi	r24, 0x34	; 52
    271a:	80 83       	st	Z, r24
					c++;
    271c:	de 01       	movw	r26, r28
    271e:	a7 53       	subi	r26, 0x37	; 55
    2720:	bf 4f       	sbci	r27, 0xFF	; 255
    2722:	fe 01       	movw	r30, r28
    2724:	e7 53       	subi	r30, 0x37	; 55
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	80 81       	ld	r24, Z
    272a:	8f 5f       	subi	r24, 0xFF	; 255
    272c:	8c 93       	st	X, r24
    272e:	fe 01       	movw	r30, r28
    2730:	e7 57       	subi	r30, 0x77	; 119
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	ac e0       	ldi	r26, 0x0C	; 12
    273a:	b2 e4       	ldi	r27, 0x42	; 66
    273c:	80 83       	st	Z, r24
    273e:	91 83       	std	Z+1, r25	; 0x01
    2740:	a2 83       	std	Z+2, r26	; 0x02
    2742:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2744:	8e 01       	movw	r16, r28
    2746:	0b 57       	subi	r16, 0x7B	; 123
    2748:	1f 4f       	sbci	r17, 0xFF	; 255
    274a:	fe 01       	movw	r30, r28
    274c:	e7 57       	subi	r30, 0x77	; 119
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	60 81       	ld	r22, Z
    2752:	71 81       	ldd	r23, Z+1	; 0x01
    2754:	82 81       	ldd	r24, Z+2	; 0x02
    2756:	93 81       	ldd	r25, Z+3	; 0x03
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4a ef       	ldi	r20, 0xFA	; 250
    275e:	54 e4       	ldi	r21, 0x44	; 68
    2760:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	f8 01       	movw	r30, r16
    276a:	80 83       	st	Z, r24
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	a2 83       	std	Z+2, r26	; 0x02
    2770:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2772:	fe 01       	movw	r30, r28
    2774:	eb 57       	subi	r30, 0x7B	; 123
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	60 81       	ld	r22, Z
    277a:	71 81       	ldd	r23, Z+1	; 0x01
    277c:	82 81       	ldd	r24, Z+2	; 0x02
    277e:	93 81       	ldd	r25, Z+3	; 0x03
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e8       	ldi	r20, 0x80	; 128
    2786:	5f e3       	ldi	r21, 0x3F	; 63
    2788:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    278c:	88 23       	and	r24, r24
    278e:	44 f4       	brge	.+16     	; 0x27a0 <main+0x82a>
		__ticks = 1;
    2790:	fe 01       	movw	r30, r28
    2792:	ed 57       	subi	r30, 0x7D	; 125
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	80 83       	st	Z, r24
    279e:	64 c0       	rjmp	.+200    	; 0x2868 <main+0x8f2>
	else if (__tmp > 65535)
    27a0:	fe 01       	movw	r30, r28
    27a2:	eb 57       	subi	r30, 0x7B	; 123
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	60 81       	ld	r22, Z
    27a8:	71 81       	ldd	r23, Z+1	; 0x01
    27aa:	82 81       	ldd	r24, Z+2	; 0x02
    27ac:	93 81       	ldd	r25, Z+3	; 0x03
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	3f ef       	ldi	r19, 0xFF	; 255
    27b2:	4f e7       	ldi	r20, 0x7F	; 127
    27b4:	57 e4       	ldi	r21, 0x47	; 71
    27b6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27ba:	18 16       	cp	r1, r24
    27bc:	0c f0       	brlt	.+2      	; 0x27c0 <main+0x84a>
    27be:	43 c0       	rjmp	.+134    	; 0x2846 <main+0x8d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c0:	fe 01       	movw	r30, r28
    27c2:	e7 57       	subi	r30, 0x77	; 119
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	51 e4       	ldi	r21, 0x41	; 65
    27d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	8e 01       	movw	r16, r28
    27e0:	0d 57       	subi	r16, 0x7D	; 125
    27e2:	1f 4f       	sbci	r17, 0xFF	; 255
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	f8 01       	movw	r30, r16
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	80 83       	st	Z, r24
    27f6:	1f c0       	rjmp	.+62     	; 0x2836 <main+0x8c0>
    27f8:	fe 01       	movw	r30, r28
    27fa:	ef 57       	subi	r30, 0x7F	; 127
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	88 ec       	ldi	r24, 0xC8	; 200
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	91 83       	std	Z+1, r25	; 0x01
    2804:	80 83       	st	Z, r24
    2806:	fe 01       	movw	r30, r28
    2808:	ef 57       	subi	r30, 0x7F	; 127
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 81       	ld	r24, Z
    280e:	91 81       	ldd	r25, Z+1	; 0x01
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <main+0x89a>
    2814:	fe 01       	movw	r30, r28
    2816:	ef 57       	subi	r30, 0x7F	; 127
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281e:	de 01       	movw	r26, r28
    2820:	ad 57       	subi	r26, 0x7D	; 125
    2822:	bf 4f       	sbci	r27, 0xFF	; 255
    2824:	fe 01       	movw	r30, r28
    2826:	ed 57       	subi	r30, 0x7D	; 125
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	11 96       	adiw	r26, 0x01	; 1
    2832:	9c 93       	st	X, r25
    2834:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2836:	fe 01       	movw	r30, r28
    2838:	ed 57       	subi	r30, 0x7D	; 125
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	80 81       	ld	r24, Z
    283e:	91 81       	ldd	r25, Z+1	; 0x01
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	d1 f6       	brne	.-76     	; 0x27f8 <main+0x882>
    2844:	28 c0       	rjmp	.+80     	; 0x2896 <main+0x920>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2846:	8e 01       	movw	r16, r28
    2848:	0d 57       	subi	r16, 0x7D	; 125
    284a:	1f 4f       	sbci	r17, 0xFF	; 255
    284c:	fe 01       	movw	r30, r28
    284e:	eb 57       	subi	r30, 0x7B	; 123
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	60 81       	ld	r22, Z
    2854:	71 81       	ldd	r23, Z+1	; 0x01
    2856:	82 81       	ldd	r24, Z+2	; 0x02
    2858:	93 81       	ldd	r25, Z+3	; 0x03
    285a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	f8 01       	movw	r30, r16
    2864:	91 83       	std	Z+1, r25	; 0x01
    2866:	80 83       	st	Z, r24
    2868:	de 01       	movw	r26, r28
    286a:	a1 58       	subi	r26, 0x81	; 129
    286c:	bf 4f       	sbci	r27, 0xFF	; 255
    286e:	fe 01       	movw	r30, r28
    2870:	ed 57       	subi	r30, 0x7D	; 125
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 81       	ld	r24, Z
    2876:	91 81       	ldd	r25, Z+1	; 0x01
    2878:	11 96       	adiw	r26, 0x01	; 1
    287a:	9c 93       	st	X, r25
    287c:	8e 93       	st	-X, r24
    287e:	fe 01       	movw	r30, r28
    2880:	e1 58       	subi	r30, 0x81	; 129
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	80 81       	ld	r24, Z
    2886:	91 81       	ldd	r25, Z+1	; 0x01
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <main+0x912>
    288c:	fe 01       	movw	r30, r28
    288e:	e1 58       	subi	r30, 0x81	; 129
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	80 83       	st	Z, r24
					_delay_ms(35);
				}

				if(key_Pressed == 5){
    2896:	fe 01       	movw	r30, r28
    2898:	e9 53       	subi	r30, 0x39	; 57
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	80 81       	ld	r24, Z
    289e:	85 30       	cpi	r24, 0x05	; 5
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <main+0x92e>
    28a2:	ce c0       	rjmp	.+412    	; 0x2a40 <main+0xaca>
					LCD_displayCharacter('*');
    28a4:	8a e2       	ldi	r24, 0x2A	; 42
    28a6:	0e 94 1f 09 	call	0x123e	; 0x123e <LCD_displayCharacter>
					pressed_Keys[c] = '5';
    28aa:	fe 01       	movw	r30, r28
    28ac:	e7 53       	subi	r30, 0x37	; 55
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	80 81       	ld	r24, Z
    28b2:	28 2f       	mov	r18, r24
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	ce 01       	movw	r24, r28
    28b8:	85 53       	subi	r24, 0x35	; 53
    28ba:	9f 4f       	sbci	r25, 0xFF	; 255
    28bc:	fc 01       	movw	r30, r24
    28be:	e2 0f       	add	r30, r18
    28c0:	f3 1f       	adc	r31, r19
    28c2:	85 e3       	ldi	r24, 0x35	; 53
    28c4:	80 83       	st	Z, r24
					c++;
    28c6:	de 01       	movw	r26, r28
    28c8:	a7 53       	subi	r26, 0x37	; 55
    28ca:	bf 4f       	sbci	r27, 0xFF	; 255
    28cc:	fe 01       	movw	r30, r28
    28ce:	e7 53       	subi	r30, 0x37	; 55
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 81       	ld	r24, Z
    28d4:	8f 5f       	subi	r24, 0xFF	; 255
    28d6:	8c 93       	st	X, r24
    28d8:	fe 01       	movw	r30, r28
    28da:	e5 58       	subi	r30, 0x85	; 133
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	ac e0       	ldi	r26, 0x0C	; 12
    28e4:	b2 e4       	ldi	r27, 0x42	; 66
    28e6:	80 83       	st	Z, r24
    28e8:	91 83       	std	Z+1, r25	; 0x01
    28ea:	a2 83       	std	Z+2, r26	; 0x02
    28ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ee:	8e 01       	movw	r16, r28
    28f0:	09 58       	subi	r16, 0x89	; 137
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	fe 01       	movw	r30, r28
    28f6:	e5 58       	subi	r30, 0x85	; 133
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	93 81       	ldd	r25, Z+3	; 0x03
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	4a ef       	ldi	r20, 0xFA	; 250
    2908:	54 e4       	ldi	r21, 0x44	; 68
    290a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	f8 01       	movw	r30, r16
    2914:	80 83       	st	Z, r24
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	a2 83       	std	Z+2, r26	; 0x02
    291a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    291c:	fe 01       	movw	r30, r28
    291e:	e9 58       	subi	r30, 0x89	; 137
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	60 81       	ld	r22, Z
    2924:	71 81       	ldd	r23, Z+1	; 0x01
    2926:	82 81       	ldd	r24, Z+2	; 0x02
    2928:	93 81       	ldd	r25, Z+3	; 0x03
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e8       	ldi	r20, 0x80	; 128
    2930:	5f e3       	ldi	r21, 0x3F	; 63
    2932:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2936:	88 23       	and	r24, r24
    2938:	44 f4       	brge	.+16     	; 0x294a <main+0x9d4>
		__ticks = 1;
    293a:	fe 01       	movw	r30, r28
    293c:	eb 58       	subi	r30, 0x8B	; 139
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	80 83       	st	Z, r24
    2948:	64 c0       	rjmp	.+200    	; 0x2a12 <main+0xa9c>
	else if (__tmp > 65535)
    294a:	fe 01       	movw	r30, r28
    294c:	e9 58       	subi	r30, 0x89	; 137
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	60 81       	ld	r22, Z
    2952:	71 81       	ldd	r23, Z+1	; 0x01
    2954:	82 81       	ldd	r24, Z+2	; 0x02
    2956:	93 81       	ldd	r25, Z+3	; 0x03
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	57 e4       	ldi	r21, 0x47	; 71
    2960:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2964:	18 16       	cp	r1, r24
    2966:	0c f0       	brlt	.+2      	; 0x296a <main+0x9f4>
    2968:	43 c0       	rjmp	.+134    	; 0x29f0 <main+0xa7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296a:	fe 01       	movw	r30, r28
    296c:	e5 58       	subi	r30, 0x85	; 133
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	93 81       	ldd	r25, Z+3	; 0x03
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e2       	ldi	r20, 0x20	; 32
    297e:	51 e4       	ldi	r21, 0x41	; 65
    2980:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	8e 01       	movw	r16, r28
    298a:	0b 58       	subi	r16, 0x8B	; 139
    298c:	1f 4f       	sbci	r17, 0xFF	; 255
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	f8 01       	movw	r30, r16
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	1f c0       	rjmp	.+62     	; 0x29e0 <main+0xa6a>
    29a2:	fe 01       	movw	r30, r28
    29a4:	ed 58       	subi	r30, 0x8D	; 141
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	88 ec       	ldi	r24, 0xC8	; 200
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	80 83       	st	Z, r24
    29b0:	fe 01       	movw	r30, r28
    29b2:	ed 58       	subi	r30, 0x8D	; 141
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <main+0xa44>
    29be:	fe 01       	movw	r30, r28
    29c0:	ed 58       	subi	r30, 0x8D	; 141
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	91 83       	std	Z+1, r25	; 0x01
    29c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c8:	de 01       	movw	r26, r28
    29ca:	ab 58       	subi	r26, 0x8B	; 139
    29cc:	bf 4f       	sbci	r27, 0xFF	; 255
    29ce:	fe 01       	movw	r30, r28
    29d0:	eb 58       	subi	r30, 0x8B	; 139
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	11 96       	adiw	r26, 0x01	; 1
    29dc:	9c 93       	st	X, r25
    29de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e0:	fe 01       	movw	r30, r28
    29e2:	eb 58       	subi	r30, 0x8B	; 139
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	91 81       	ldd	r25, Z+1	; 0x01
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	d1 f6       	brne	.-76     	; 0x29a2 <main+0xa2c>
    29ee:	28 c0       	rjmp	.+80     	; 0x2a40 <main+0xaca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	8e 01       	movw	r16, r28
    29f2:	0b 58       	subi	r16, 0x8B	; 139
    29f4:	1f 4f       	sbci	r17, 0xFF	; 255
    29f6:	fe 01       	movw	r30, r28
    29f8:	e9 58       	subi	r30, 0x89	; 137
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	f8 01       	movw	r30, r16
    2a0e:	91 83       	std	Z+1, r25	; 0x01
    2a10:	80 83       	st	Z, r24
    2a12:	de 01       	movw	r26, r28
    2a14:	af 58       	subi	r26, 0x8F	; 143
    2a16:	bf 4f       	sbci	r27, 0xFF	; 255
    2a18:	fe 01       	movw	r30, r28
    2a1a:	eb 58       	subi	r30, 0x8B	; 139
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	80 81       	ld	r24, Z
    2a20:	91 81       	ldd	r25, Z+1	; 0x01
    2a22:	11 96       	adiw	r26, 0x01	; 1
    2a24:	9c 93       	st	X, r25
    2a26:	8e 93       	st	-X, r24
    2a28:	fe 01       	movw	r30, r28
    2a2a:	ef 58       	subi	r30, 0x8F	; 143
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	91 81       	ldd	r25, Z+1	; 0x01
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	f1 f7       	brne	.-4      	; 0x2a32 <main+0xabc>
    2a36:	fe 01       	movw	r30, r28
    2a38:	ef 58       	subi	r30, 0x8F	; 143
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	91 83       	std	Z+1, r25	; 0x01
    2a3e:	80 83       	st	Z, r24
					_delay_ms(35);
				}

				if(key_Pressed == 6){
    2a40:	fe 01       	movw	r30, r28
    2a42:	e9 53       	subi	r30, 0x39	; 57
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	80 81       	ld	r24, Z
    2a48:	86 30       	cpi	r24, 0x06	; 6
    2a4a:	09 f0       	breq	.+2      	; 0x2a4e <main+0xad8>
    2a4c:	ce c0       	rjmp	.+412    	; 0x2bea <main+0xc74>
					LCD_displayCharacter('*');
    2a4e:	8a e2       	ldi	r24, 0x2A	; 42
    2a50:	0e 94 1f 09 	call	0x123e	; 0x123e <LCD_displayCharacter>
					pressed_Keys[c] = '6';
    2a54:	fe 01       	movw	r30, r28
    2a56:	e7 53       	subi	r30, 0x37	; 55
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	ce 01       	movw	r24, r28
    2a62:	85 53       	subi	r24, 0x35	; 53
    2a64:	9f 4f       	sbci	r25, 0xFF	; 255
    2a66:	fc 01       	movw	r30, r24
    2a68:	e2 0f       	add	r30, r18
    2a6a:	f3 1f       	adc	r31, r19
    2a6c:	86 e3       	ldi	r24, 0x36	; 54
    2a6e:	80 83       	st	Z, r24
					c++;
    2a70:	de 01       	movw	r26, r28
    2a72:	a7 53       	subi	r26, 0x37	; 55
    2a74:	bf 4f       	sbci	r27, 0xFF	; 255
    2a76:	fe 01       	movw	r30, r28
    2a78:	e7 53       	subi	r30, 0x37	; 55
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 81       	ld	r24, Z
    2a7e:	8f 5f       	subi	r24, 0xFF	; 255
    2a80:	8c 93       	st	X, r24
    2a82:	fe 01       	movw	r30, r28
    2a84:	e3 59       	subi	r30, 0x93	; 147
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	ac e0       	ldi	r26, 0x0C	; 12
    2a8e:	b2 e4       	ldi	r27, 0x42	; 66
    2a90:	80 83       	st	Z, r24
    2a92:	91 83       	std	Z+1, r25	; 0x01
    2a94:	a2 83       	std	Z+2, r26	; 0x02
    2a96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a98:	8e 01       	movw	r16, r28
    2a9a:	07 59       	subi	r16, 0x97	; 151
    2a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e3 59       	subi	r30, 0x93	; 147
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	60 81       	ld	r22, Z
    2aa6:	71 81       	ldd	r23, Z+1	; 0x01
    2aa8:	82 81       	ldd	r24, Z+2	; 0x02
    2aaa:	93 81       	ldd	r25, Z+3	; 0x03
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	4a ef       	ldi	r20, 0xFA	; 250
    2ab2:	54 e4       	ldi	r21, 0x44	; 68
    2ab4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	f8 01       	movw	r30, r16
    2abe:	80 83       	st	Z, r24
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	a2 83       	std	Z+2, r26	; 0x02
    2ac4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e7 59       	subi	r30, 0x97	; 151
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e8       	ldi	r20, 0x80	; 128
    2ada:	5f e3       	ldi	r21, 0x3F	; 63
    2adc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ae0:	88 23       	and	r24, r24
    2ae2:	44 f4       	brge	.+16     	; 0x2af4 <main+0xb7e>
		__ticks = 1;
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e9 59       	subi	r30, 0x99	; 153
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	91 83       	std	Z+1, r25	; 0x01
    2af0:	80 83       	st	Z, r24
    2af2:	64 c0       	rjmp	.+200    	; 0x2bbc <main+0xc46>
	else if (__tmp > 65535)
    2af4:	fe 01       	movw	r30, r28
    2af6:	e7 59       	subi	r30, 0x97	; 151
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	60 81       	ld	r22, Z
    2afc:	71 81       	ldd	r23, Z+1	; 0x01
    2afe:	82 81       	ldd	r24, Z+2	; 0x02
    2b00:	93 81       	ldd	r25, Z+3	; 0x03
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	3f ef       	ldi	r19, 0xFF	; 255
    2b06:	4f e7       	ldi	r20, 0x7F	; 127
    2b08:	57 e4       	ldi	r21, 0x47	; 71
    2b0a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b0e:	18 16       	cp	r1, r24
    2b10:	0c f0       	brlt	.+2      	; 0x2b14 <main+0xb9e>
    2b12:	43 c0       	rjmp	.+134    	; 0x2b9a <main+0xc24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b14:	fe 01       	movw	r30, r28
    2b16:	e3 59       	subi	r30, 0x93	; 147
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	60 81       	ld	r22, Z
    2b1c:	71 81       	ldd	r23, Z+1	; 0x01
    2b1e:	82 81       	ldd	r24, Z+2	; 0x02
    2b20:	93 81       	ldd	r25, Z+3	; 0x03
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e2       	ldi	r20, 0x20	; 32
    2b28:	51 e4       	ldi	r21, 0x41	; 65
    2b2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	8e 01       	movw	r16, r28
    2b34:	09 59       	subi	r16, 0x99	; 153
    2b36:	1f 4f       	sbci	r17, 0xFF	; 255
    2b38:	bc 01       	movw	r22, r24
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	f8 01       	movw	r30, r16
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
    2b4a:	1f c0       	rjmp	.+62     	; 0x2b8a <main+0xc14>
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	eb 59       	subi	r30, 0x9B	; 155
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	88 ec       	ldi	r24, 0xC8	; 200
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	91 83       	std	Z+1, r25	; 0x01
    2b58:	80 83       	st	Z, r24
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	eb 59       	subi	r30, 0x9B	; 155
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	80 81       	ld	r24, Z
    2b62:	91 81       	ldd	r25, Z+1	; 0x01
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <main+0xbee>
    2b68:	fe 01       	movw	r30, r28
    2b6a:	eb 59       	subi	r30, 0x9B	; 155
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	91 83       	std	Z+1, r25	; 0x01
    2b70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b72:	de 01       	movw	r26, r28
    2b74:	a9 59       	subi	r26, 0x99	; 153
    2b76:	bf 4f       	sbci	r27, 0xFF	; 255
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e9 59       	subi	r30, 0x99	; 153
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 81       	ld	r24, Z
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	11 96       	adiw	r26, 0x01	; 1
    2b86:	9c 93       	st	X, r25
    2b88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e9 59       	subi	r30, 0x99	; 153
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	d1 f6       	brne	.-76     	; 0x2b4c <main+0xbd6>
    2b98:	28 c0       	rjmp	.+80     	; 0x2bea <main+0xc74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9a:	8e 01       	movw	r16, r28
    2b9c:	09 59       	subi	r16, 0x99	; 153
    2b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e7 59       	subi	r30, 0x97	; 151
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	60 81       	ld	r22, Z
    2ba8:	71 81       	ldd	r23, Z+1	; 0x01
    2baa:	82 81       	ldd	r24, Z+2	; 0x02
    2bac:	93 81       	ldd	r25, Z+3	; 0x03
    2bae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
    2bbc:	de 01       	movw	r26, r28
    2bbe:	ad 59       	subi	r26, 0x9D	; 157
    2bc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e9 59       	subi	r30, 0x99	; 153
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	11 96       	adiw	r26, 0x01	; 1
    2bce:	9c 93       	st	X, r25
    2bd0:	8e 93       	st	-X, r24
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	ed 59       	subi	r30, 0x9D	; 157
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	80 81       	ld	r24, Z
    2bda:	91 81       	ldd	r25, Z+1	; 0x01
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <main+0xc66>
    2be0:	fe 01       	movw	r30, r28
    2be2:	ed 59       	subi	r30, 0x9D	; 157
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	91 83       	std	Z+1, r25	; 0x01
    2be8:	80 83       	st	Z, r24
					_delay_ms(35);
				}

				if(key_Pressed == 7){
    2bea:	fe 01       	movw	r30, r28
    2bec:	e9 53       	subi	r30, 0x39	; 57
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	80 81       	ld	r24, Z
    2bf2:	87 30       	cpi	r24, 0x07	; 7
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <main+0xc82>
    2bf6:	ce c0       	rjmp	.+412    	; 0x2d94 <main+0xe1e>
					LCD_displayCharacter('*');
    2bf8:	8a e2       	ldi	r24, 0x2A	; 42
    2bfa:	0e 94 1f 09 	call	0x123e	; 0x123e <LCD_displayCharacter>
					pressed_Keys[c] = '7';
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e7 53       	subi	r30, 0x37	; 55
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	80 81       	ld	r24, Z
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	ce 01       	movw	r24, r28
    2c0c:	85 53       	subi	r24, 0x35	; 53
    2c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c10:	fc 01       	movw	r30, r24
    2c12:	e2 0f       	add	r30, r18
    2c14:	f3 1f       	adc	r31, r19
    2c16:	87 e3       	ldi	r24, 0x37	; 55
    2c18:	80 83       	st	Z, r24
					c++;
    2c1a:	de 01       	movw	r26, r28
    2c1c:	a7 53       	subi	r26, 0x37	; 55
    2c1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c20:	fe 01       	movw	r30, r28
    2c22:	e7 53       	subi	r30, 0x37	; 55
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 81       	ld	r24, Z
    2c28:	8f 5f       	subi	r24, 0xFF	; 255
    2c2a:	8c 93       	st	X, r24
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e1 5a       	subi	r30, 0xA1	; 161
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	ac e0       	ldi	r26, 0x0C	; 12
    2c38:	b2 e4       	ldi	r27, 0x42	; 66
    2c3a:	80 83       	st	Z, r24
    2c3c:	91 83       	std	Z+1, r25	; 0x01
    2c3e:	a2 83       	std	Z+2, r26	; 0x02
    2c40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c42:	8e 01       	movw	r16, r28
    2c44:	05 5a       	subi	r16, 0xA5	; 165
    2c46:	1f 4f       	sbci	r17, 0xFF	; 255
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e1 5a       	subi	r30, 0xA1	; 161
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	60 81       	ld	r22, Z
    2c50:	71 81       	ldd	r23, Z+1	; 0x01
    2c52:	82 81       	ldd	r24, Z+2	; 0x02
    2c54:	93 81       	ldd	r25, Z+3	; 0x03
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	4a ef       	ldi	r20, 0xFA	; 250
    2c5c:	54 e4       	ldi	r21, 0x44	; 68
    2c5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	f8 01       	movw	r30, r16
    2c68:	80 83       	st	Z, r24
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	a2 83       	std	Z+2, r26	; 0x02
    2c6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c70:	fe 01       	movw	r30, r28
    2c72:	e5 5a       	subi	r30, 0xA5	; 165
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	60 81       	ld	r22, Z
    2c78:	71 81       	ldd	r23, Z+1	; 0x01
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	93 81       	ldd	r25, Z+3	; 0x03
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e8       	ldi	r20, 0x80	; 128
    2c84:	5f e3       	ldi	r21, 0x3F	; 63
    2c86:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c8a:	88 23       	and	r24, r24
    2c8c:	44 f4       	brge	.+16     	; 0x2c9e <main+0xd28>
		__ticks = 1;
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e7 5a       	subi	r30, 0xA7	; 167
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
    2c9c:	64 c0       	rjmp	.+200    	; 0x2d66 <main+0xdf0>
	else if (__tmp > 65535)
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e5 5a       	subi	r30, 0xA5	; 165
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	60 81       	ld	r22, Z
    2ca6:	71 81       	ldd	r23, Z+1	; 0x01
    2ca8:	82 81       	ldd	r24, Z+2	; 0x02
    2caa:	93 81       	ldd	r25, Z+3	; 0x03
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	3f ef       	ldi	r19, 0xFF	; 255
    2cb0:	4f e7       	ldi	r20, 0x7F	; 127
    2cb2:	57 e4       	ldi	r21, 0x47	; 71
    2cb4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cb8:	18 16       	cp	r1, r24
    2cba:	0c f0       	brlt	.+2      	; 0x2cbe <main+0xd48>
    2cbc:	43 c0       	rjmp	.+134    	; 0x2d44 <main+0xdce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e1 5a       	subi	r30, 0xA1	; 161
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	60 81       	ld	r22, Z
    2cc6:	71 81       	ldd	r23, Z+1	; 0x01
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	93 81       	ldd	r25, Z+3	; 0x03
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e2       	ldi	r20, 0x20	; 32
    2cd2:	51 e4       	ldi	r21, 0x41	; 65
    2cd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	8e 01       	movw	r16, r28
    2cde:	07 5a       	subi	r16, 0xA7	; 167
    2ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	f8 01       	movw	r30, r16
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
    2cf4:	1f c0       	rjmp	.+62     	; 0x2d34 <main+0xdbe>
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	e9 5a       	subi	r30, 0xA9	; 169
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	88 ec       	ldi	r24, 0xC8	; 200
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	80 83       	st	Z, r24
    2d04:	fe 01       	movw	r30, r28
    2d06:	e9 5a       	subi	r30, 0xA9	; 169
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 81       	ld	r24, Z
    2d0c:	91 81       	ldd	r25, Z+1	; 0x01
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <main+0xd98>
    2d12:	fe 01       	movw	r30, r28
    2d14:	e9 5a       	subi	r30, 0xA9	; 169
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	91 83       	std	Z+1, r25	; 0x01
    2d1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1c:	de 01       	movw	r26, r28
    2d1e:	a7 5a       	subi	r26, 0xA7	; 167
    2d20:	bf 4f       	sbci	r27, 0xFF	; 255
    2d22:	fe 01       	movw	r30, r28
    2d24:	e7 5a       	subi	r30, 0xA7	; 167
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	91 81       	ldd	r25, Z+1	; 0x01
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	11 96       	adiw	r26, 0x01	; 1
    2d30:	9c 93       	st	X, r25
    2d32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d34:	fe 01       	movw	r30, r28
    2d36:	e7 5a       	subi	r30, 0xA7	; 167
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	d1 f6       	brne	.-76     	; 0x2cf6 <main+0xd80>
    2d42:	28 c0       	rjmp	.+80     	; 0x2d94 <main+0xe1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d44:	8e 01       	movw	r16, r28
    2d46:	07 5a       	subi	r16, 0xA7	; 167
    2d48:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e5 5a       	subi	r30, 0xA5	; 165
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	60 81       	ld	r22, Z
    2d52:	71 81       	ldd	r23, Z+1	; 0x01
    2d54:	82 81       	ldd	r24, Z+2	; 0x02
    2d56:	93 81       	ldd	r25, Z+3	; 0x03
    2d58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	f8 01       	movw	r30, r16
    2d62:	91 83       	std	Z+1, r25	; 0x01
    2d64:	80 83       	st	Z, r24
    2d66:	de 01       	movw	r26, r28
    2d68:	ab 5a       	subi	r26, 0xAB	; 171
    2d6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e7 5a       	subi	r30, 0xA7	; 167
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	11 96       	adiw	r26, 0x01	; 1
    2d78:	9c 93       	st	X, r25
    2d7a:	8e 93       	st	-X, r24
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	eb 5a       	subi	r30, 0xAB	; 171
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	80 81       	ld	r24, Z
    2d84:	91 81       	ldd	r25, Z+1	; 0x01
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <main+0xe10>
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	eb 5a       	subi	r30, 0xAB	; 171
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	80 83       	st	Z, r24
					_delay_ms(35);
				}

				if(key_Pressed == 8){
    2d94:	fe 01       	movw	r30, r28
    2d96:	e9 53       	subi	r30, 0x39	; 57
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	80 81       	ld	r24, Z
    2d9c:	88 30       	cpi	r24, 0x08	; 8
    2d9e:	09 f0       	breq	.+2      	; 0x2da2 <main+0xe2c>
    2da0:	ce c0       	rjmp	.+412    	; 0x2f3e <main+0xfc8>
					LCD_displayCharacter('*');
    2da2:	8a e2       	ldi	r24, 0x2A	; 42
    2da4:	0e 94 1f 09 	call	0x123e	; 0x123e <LCD_displayCharacter>
					pressed_Keys[c] = '8';
    2da8:	fe 01       	movw	r30, r28
    2daa:	e7 53       	subi	r30, 0x37	; 55
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	80 81       	ld	r24, Z
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	ce 01       	movw	r24, r28
    2db6:	85 53       	subi	r24, 0x35	; 53
    2db8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dba:	fc 01       	movw	r30, r24
    2dbc:	e2 0f       	add	r30, r18
    2dbe:	f3 1f       	adc	r31, r19
    2dc0:	88 e3       	ldi	r24, 0x38	; 56
    2dc2:	80 83       	st	Z, r24
					c++;
    2dc4:	de 01       	movw	r26, r28
    2dc6:	a7 53       	subi	r26, 0x37	; 55
    2dc8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dca:	fe 01       	movw	r30, r28
    2dcc:	e7 53       	subi	r30, 0x37	; 55
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	80 81       	ld	r24, Z
    2dd2:	8f 5f       	subi	r24, 0xFF	; 255
    2dd4:	8c 93       	st	X, r24
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	ef 5a       	subi	r30, 0xAF	; 175
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	ac e0       	ldi	r26, 0x0C	; 12
    2de2:	b2 e4       	ldi	r27, 0x42	; 66
    2de4:	80 83       	st	Z, r24
    2de6:	91 83       	std	Z+1, r25	; 0x01
    2de8:	a2 83       	std	Z+2, r26	; 0x02
    2dea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dec:	8e 01       	movw	r16, r28
    2dee:	03 5b       	subi	r16, 0xB3	; 179
    2df0:	1f 4f       	sbci	r17, 0xFF	; 255
    2df2:	fe 01       	movw	r30, r28
    2df4:	ef 5a       	subi	r30, 0xAF	; 175
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	60 81       	ld	r22, Z
    2dfa:	71 81       	ldd	r23, Z+1	; 0x01
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	4a ef       	ldi	r20, 0xFA	; 250
    2e06:	54 e4       	ldi	r21, 0x44	; 68
    2e08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	f8 01       	movw	r30, r16
    2e12:	80 83       	st	Z, r24
    2e14:	91 83       	std	Z+1, r25	; 0x01
    2e16:	a2 83       	std	Z+2, r26	; 0x02
    2e18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	e3 5b       	subi	r30, 0xB3	; 179
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	60 81       	ld	r22, Z
    2e22:	71 81       	ldd	r23, Z+1	; 0x01
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	93 81       	ldd	r25, Z+3	; 0x03
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e8       	ldi	r20, 0x80	; 128
    2e2e:	5f e3       	ldi	r21, 0x3F	; 63
    2e30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e34:	88 23       	and	r24, r24
    2e36:	44 f4       	brge	.+16     	; 0x2e48 <main+0xed2>
		__ticks = 1;
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e5 5b       	subi	r30, 0xB5	; 181
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
    2e46:	64 c0       	rjmp	.+200    	; 0x2f10 <main+0xf9a>
	else if (__tmp > 65535)
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e3 5b       	subi	r30, 0xB3	; 179
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	60 81       	ld	r22, Z
    2e50:	71 81       	ldd	r23, Z+1	; 0x01
    2e52:	82 81       	ldd	r24, Z+2	; 0x02
    2e54:	93 81       	ldd	r25, Z+3	; 0x03
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	3f ef       	ldi	r19, 0xFF	; 255
    2e5a:	4f e7       	ldi	r20, 0x7F	; 127
    2e5c:	57 e4       	ldi	r21, 0x47	; 71
    2e5e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e62:	18 16       	cp	r1, r24
    2e64:	0c f0       	brlt	.+2      	; 0x2e68 <main+0xef2>
    2e66:	43 c0       	rjmp	.+134    	; 0x2eee <main+0xf78>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e68:	fe 01       	movw	r30, r28
    2e6a:	ef 5a       	subi	r30, 0xAF	; 175
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	60 81       	ld	r22, Z
    2e70:	71 81       	ldd	r23, Z+1	; 0x01
    2e72:	82 81       	ldd	r24, Z+2	; 0x02
    2e74:	93 81       	ldd	r25, Z+3	; 0x03
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	40 e2       	ldi	r20, 0x20	; 32
    2e7c:	51 e4       	ldi	r21, 0x41	; 65
    2e7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	8e 01       	movw	r16, r28
    2e88:	05 5b       	subi	r16, 0xB5	; 181
    2e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8c:	bc 01       	movw	r22, r24
    2e8e:	cd 01       	movw	r24, r26
    2e90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e94:	dc 01       	movw	r26, r24
    2e96:	cb 01       	movw	r24, r22
    2e98:	f8 01       	movw	r30, r16
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	80 83       	st	Z, r24
    2e9e:	1f c0       	rjmp	.+62     	; 0x2ede <main+0xf68>
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e7 5b       	subi	r30, 0xB7	; 183
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	88 ec       	ldi	r24, 0xC8	; 200
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	80 83       	st	Z, r24
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e7 5b       	subi	r30, 0xB7	; 183
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	80 81       	ld	r24, Z
    2eb6:	91 81       	ldd	r25, Z+1	; 0x01
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <main+0xf42>
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e7 5b       	subi	r30, 0xB7	; 183
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	91 83       	std	Z+1, r25	; 0x01
    2ec4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec6:	de 01       	movw	r26, r28
    2ec8:	a5 5b       	subi	r26, 0xB5	; 181
    2eca:	bf 4f       	sbci	r27, 0xFF	; 255
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e5 5b       	subi	r30, 0xB5	; 181
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	11 96       	adiw	r26, 0x01	; 1
    2eda:	9c 93       	st	X, r25
    2edc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ede:	fe 01       	movw	r30, r28
    2ee0:	e5 5b       	subi	r30, 0xB5	; 181
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	80 81       	ld	r24, Z
    2ee6:	91 81       	ldd	r25, Z+1	; 0x01
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	d1 f6       	brne	.-76     	; 0x2ea0 <main+0xf2a>
    2eec:	28 c0       	rjmp	.+80     	; 0x2f3e <main+0xfc8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eee:	8e 01       	movw	r16, r28
    2ef0:	05 5b       	subi	r16, 0xB5	; 181
    2ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	e3 5b       	subi	r30, 0xB3	; 179
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	60 81       	ld	r22, Z
    2efc:	71 81       	ldd	r23, Z+1	; 0x01
    2efe:	82 81       	ldd	r24, Z+2	; 0x02
    2f00:	93 81       	ldd	r25, Z+3	; 0x03
    2f02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	f8 01       	movw	r30, r16
    2f0c:	91 83       	std	Z+1, r25	; 0x01
    2f0e:	80 83       	st	Z, r24
    2f10:	de 01       	movw	r26, r28
    2f12:	a9 5b       	subi	r26, 0xB9	; 185
    2f14:	bf 4f       	sbci	r27, 0xFF	; 255
    2f16:	fe 01       	movw	r30, r28
    2f18:	e5 5b       	subi	r30, 0xB5	; 181
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	11 96       	adiw	r26, 0x01	; 1
    2f22:	9c 93       	st	X, r25
    2f24:	8e 93       	st	-X, r24
    2f26:	fe 01       	movw	r30, r28
    2f28:	e9 5b       	subi	r30, 0xB9	; 185
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	91 81       	ldd	r25, Z+1	; 0x01
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <main+0xfba>
    2f34:	fe 01       	movw	r30, r28
    2f36:	e9 5b       	subi	r30, 0xB9	; 185
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	80 83       	st	Z, r24
					_delay_ms(35);
				}

				if(key_Pressed == 9){
    2f3e:	fe 01       	movw	r30, r28
    2f40:	e9 53       	subi	r30, 0x39	; 57
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 81       	ld	r24, Z
    2f46:	89 30       	cpi	r24, 0x09	; 9
    2f48:	09 f0       	breq	.+2      	; 0x2f4c <main+0xfd6>
    2f4a:	9f c0       	rjmp	.+318    	; 0x308a <main+0x1114>
					LCD_displayCharacter('*');
    2f4c:	8a e2       	ldi	r24, 0x2A	; 42
    2f4e:	0e 94 1f 09 	call	0x123e	; 0x123e <LCD_displayCharacter>
					pressed_Keys[c] = '9';
    2f52:	fe 01       	movw	r30, r28
    2f54:	e7 53       	subi	r30, 0x37	; 55
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	80 81       	ld	r24, Z
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	ce 01       	movw	r24, r28
    2f60:	85 53       	subi	r24, 0x35	; 53
    2f62:	9f 4f       	sbci	r25, 0xFF	; 255
    2f64:	fc 01       	movw	r30, r24
    2f66:	e2 0f       	add	r30, r18
    2f68:	f3 1f       	adc	r31, r19
    2f6a:	89 e3       	ldi	r24, 0x39	; 57
    2f6c:	80 83       	st	Z, r24
					c++;
    2f6e:	de 01       	movw	r26, r28
    2f70:	a7 53       	subi	r26, 0x37	; 55
    2f72:	bf 4f       	sbci	r27, 0xFF	; 255
    2f74:	fe 01       	movw	r30, r28
    2f76:	e7 53       	subi	r30, 0x37	; 55
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	80 81       	ld	r24, Z
    2f7c:	8f 5f       	subi	r24, 0xFF	; 255
    2f7e:	8c 93       	st	X, r24
    2f80:	fe 01       	movw	r30, r28
    2f82:	ed 5b       	subi	r30, 0xBD	; 189
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	ac e0       	ldi	r26, 0x0C	; 12
    2f8c:	b2 e4       	ldi	r27, 0x42	; 66
    2f8e:	80 83       	st	Z, r24
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	a2 83       	std	Z+2, r26	; 0x02
    2f94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f96:	8e 01       	movw	r16, r28
    2f98:	01 5c       	subi	r16, 0xC1	; 193
    2f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	ed 5b       	subi	r30, 0xBD	; 189
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	60 81       	ld	r22, Z
    2fa4:	71 81       	ldd	r23, Z+1	; 0x01
    2fa6:	82 81       	ldd	r24, Z+2	; 0x02
    2fa8:	93 81       	ldd	r25, Z+3	; 0x03
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	4a ef       	ldi	r20, 0xFA	; 250
    2fb0:	54 e4       	ldi	r21, 0x44	; 68
    2fb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	f8 01       	movw	r30, r16
    2fbc:	80 83       	st	Z, r24
    2fbe:	91 83       	std	Z+1, r25	; 0x01
    2fc0:	a2 83       	std	Z+2, r26	; 0x02
    2fc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	ff 96       	adiw	r30, 0x3f	; 63
    2fc8:	60 81       	ld	r22, Z
    2fca:	71 81       	ldd	r23, Z+1	; 0x01
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	93 81       	ldd	r25, Z+3	; 0x03
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	40 e8       	ldi	r20, 0x80	; 128
    2fd6:	5f e3       	ldi	r21, 0x3F	; 63
    2fd8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fdc:	88 23       	and	r24, r24
    2fde:	2c f4       	brge	.+10     	; 0x2fea <main+0x1074>
		__ticks = 1;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	9e af       	std	Y+62, r25	; 0x3e
    2fe6:	8d af       	std	Y+61, r24	; 0x3d
    2fe8:	46 c0       	rjmp	.+140    	; 0x3076 <main+0x1100>
	else if (__tmp > 65535)
    2fea:	fe 01       	movw	r30, r28
    2fec:	ff 96       	adiw	r30, 0x3f	; 63
    2fee:	60 81       	ld	r22, Z
    2ff0:	71 81       	ldd	r23, Z+1	; 0x01
    2ff2:	82 81       	ldd	r24, Z+2	; 0x02
    2ff4:	93 81       	ldd	r25, Z+3	; 0x03
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	3f ef       	ldi	r19, 0xFF	; 255
    2ffa:	4f e7       	ldi	r20, 0x7F	; 127
    2ffc:	57 e4       	ldi	r21, 0x47	; 71
    2ffe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3002:	18 16       	cp	r1, r24
    3004:	64 f5       	brge	.+88     	; 0x305e <main+0x10e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3006:	fe 01       	movw	r30, r28
    3008:	ed 5b       	subi	r30, 0xBD	; 189
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	60 81       	ld	r22, Z
    300e:	71 81       	ldd	r23, Z+1	; 0x01
    3010:	82 81       	ldd	r24, Z+2	; 0x02
    3012:	93 81       	ldd	r25, Z+3	; 0x03
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e2       	ldi	r20, 0x20	; 32
    301a:	51 e4       	ldi	r21, 0x41	; 65
    301c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	bc 01       	movw	r22, r24
    3026:	cd 01       	movw	r24, r26
    3028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	9e af       	std	Y+62, r25	; 0x3e
    3032:	8d af       	std	Y+61, r24	; 0x3d
    3034:	0f c0       	rjmp	.+30     	; 0x3054 <main+0x10de>
    3036:	88 ec       	ldi	r24, 0xC8	; 200
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	9c af       	std	Y+60, r25	; 0x3c
    303c:	8b af       	std	Y+59, r24	; 0x3b
    303e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3040:	9c ad       	ldd	r25, Y+60	; 0x3c
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <main+0x10cc>
    3046:	9c af       	std	Y+60, r25	; 0x3c
    3048:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304a:	8d ad       	ldd	r24, Y+61	; 0x3d
    304c:	9e ad       	ldd	r25, Y+62	; 0x3e
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	9e af       	std	Y+62, r25	; 0x3e
    3052:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3054:	8d ad       	ldd	r24, Y+61	; 0x3d
    3056:	9e ad       	ldd	r25, Y+62	; 0x3e
    3058:	00 97       	sbiw	r24, 0x00	; 0
    305a:	69 f7       	brne	.-38     	; 0x3036 <main+0x10c0>
    305c:	16 c0       	rjmp	.+44     	; 0x308a <main+0x1114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305e:	fe 01       	movw	r30, r28
    3060:	ff 96       	adiw	r30, 0x3f	; 63
    3062:	60 81       	ld	r22, Z
    3064:	71 81       	ldd	r23, Z+1	; 0x01
    3066:	82 81       	ldd	r24, Z+2	; 0x02
    3068:	93 81       	ldd	r25, Z+3	; 0x03
    306a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	9e af       	std	Y+62, r25	; 0x3e
    3074:	8d af       	std	Y+61, r24	; 0x3d
    3076:	8d ad       	ldd	r24, Y+61	; 0x3d
    3078:	9e ad       	ldd	r25, Y+62	; 0x3e
    307a:	9a af       	std	Y+58, r25	; 0x3a
    307c:	89 af       	std	Y+57, r24	; 0x39
    307e:	89 ad       	ldd	r24, Y+57	; 0x39
    3080:	9a ad       	ldd	r25, Y+58	; 0x3a
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <main+0x110c>
    3086:	9a af       	std	Y+58, r25	; 0x3a
    3088:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(35);
				}

				if(key_Pressed == '*'){
    308a:	fe 01       	movw	r30, r28
    308c:	e9 53       	subi	r30, 0x39	; 57
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	80 81       	ld	r24, Z
    3092:	8a 32       	cpi	r24, 0x2A	; 42
    3094:	09 f0       	breq	.+2      	; 0x3098 <main+0x1122>
    3096:	8c c0       	rjmp	.+280    	; 0x31b0 <main+0x123a>
					LCD_displayCharacter('*');
    3098:	8a e2       	ldi	r24, 0x2A	; 42
    309a:	0e 94 1f 09 	call	0x123e	; 0x123e <LCD_displayCharacter>
					pressed_Keys[c] = '*';
    309e:	fe 01       	movw	r30, r28
    30a0:	e7 53       	subi	r30, 0x37	; 55
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	80 81       	ld	r24, Z
    30a6:	28 2f       	mov	r18, r24
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	ce 01       	movw	r24, r28
    30ac:	85 53       	subi	r24, 0x35	; 53
    30ae:	9f 4f       	sbci	r25, 0xFF	; 255
    30b0:	fc 01       	movw	r30, r24
    30b2:	e2 0f       	add	r30, r18
    30b4:	f3 1f       	adc	r31, r19
    30b6:	8a e2       	ldi	r24, 0x2A	; 42
    30b8:	80 83       	st	Z, r24
					c++;
    30ba:	de 01       	movw	r26, r28
    30bc:	a7 53       	subi	r26, 0x37	; 55
    30be:	bf 4f       	sbci	r27, 0xFF	; 255
    30c0:	fe 01       	movw	r30, r28
    30c2:	e7 53       	subi	r30, 0x37	; 55
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	80 81       	ld	r24, Z
    30c8:	8f 5f       	subi	r24, 0xFF	; 255
    30ca:	8c 93       	st	X, r24
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	ac e0       	ldi	r26, 0x0C	; 12
    30d2:	b2 e4       	ldi	r27, 0x42	; 66
    30d4:	8d ab       	std	Y+53, r24	; 0x35
    30d6:	9e ab       	std	Y+54, r25	; 0x36
    30d8:	af ab       	std	Y+55, r26	; 0x37
    30da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30dc:	6d a9       	ldd	r22, Y+53	; 0x35
    30de:	7e a9       	ldd	r23, Y+54	; 0x36
    30e0:	8f a9       	ldd	r24, Y+55	; 0x37
    30e2:	98 ad       	ldd	r25, Y+56	; 0x38
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	4a ef       	ldi	r20, 0xFA	; 250
    30ea:	54 e4       	ldi	r21, 0x44	; 68
    30ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	89 ab       	std	Y+49, r24	; 0x31
    30f6:	9a ab       	std	Y+50, r25	; 0x32
    30f8:	ab ab       	std	Y+51, r26	; 0x33
    30fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30fc:	69 a9       	ldd	r22, Y+49	; 0x31
    30fe:	7a a9       	ldd	r23, Y+50	; 0x32
    3100:	8b a9       	ldd	r24, Y+51	; 0x33
    3102:	9c a9       	ldd	r25, Y+52	; 0x34
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e8       	ldi	r20, 0x80	; 128
    310a:	5f e3       	ldi	r21, 0x3F	; 63
    310c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3110:	88 23       	and	r24, r24
    3112:	2c f4       	brge	.+10     	; 0x311e <main+0x11a8>
		__ticks = 1;
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	98 ab       	std	Y+48, r25	; 0x30
    311a:	8f a7       	std	Y+47, r24	; 0x2f
    311c:	3f c0       	rjmp	.+126    	; 0x319c <main+0x1226>
	else if (__tmp > 65535)
    311e:	69 a9       	ldd	r22, Y+49	; 0x31
    3120:	7a a9       	ldd	r23, Y+50	; 0x32
    3122:	8b a9       	ldd	r24, Y+51	; 0x33
    3124:	9c a9       	ldd	r25, Y+52	; 0x34
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	3f ef       	ldi	r19, 0xFF	; 255
    312a:	4f e7       	ldi	r20, 0x7F	; 127
    312c:	57 e4       	ldi	r21, 0x47	; 71
    312e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3132:	18 16       	cp	r1, r24
    3134:	4c f5       	brge	.+82     	; 0x3188 <main+0x1212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3136:	6d a9       	ldd	r22, Y+53	; 0x35
    3138:	7e a9       	ldd	r23, Y+54	; 0x36
    313a:	8f a9       	ldd	r24, Y+55	; 0x37
    313c:	98 ad       	ldd	r25, Y+56	; 0x38
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e2       	ldi	r20, 0x20	; 32
    3144:	51 e4       	ldi	r21, 0x41	; 65
    3146:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	bc 01       	movw	r22, r24
    3150:	cd 01       	movw	r24, r26
    3152:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	98 ab       	std	Y+48, r25	; 0x30
    315c:	8f a7       	std	Y+47, r24	; 0x2f
    315e:	0f c0       	rjmp	.+30     	; 0x317e <main+0x1208>
    3160:	88 ec       	ldi	r24, 0xC8	; 200
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	9e a7       	std	Y+46, r25	; 0x2e
    3166:	8d a7       	std	Y+45, r24	; 0x2d
    3168:	8d a5       	ldd	r24, Y+45	; 0x2d
    316a:	9e a5       	ldd	r25, Y+46	; 0x2e
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	f1 f7       	brne	.-4      	; 0x316c <main+0x11f6>
    3170:	9e a7       	std	Y+46, r25	; 0x2e
    3172:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3174:	8f a5       	ldd	r24, Y+47	; 0x2f
    3176:	98 a9       	ldd	r25, Y+48	; 0x30
    3178:	01 97       	sbiw	r24, 0x01	; 1
    317a:	98 ab       	std	Y+48, r25	; 0x30
    317c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3180:	98 a9       	ldd	r25, Y+48	; 0x30
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	69 f7       	brne	.-38     	; 0x3160 <main+0x11ea>
    3186:	14 c0       	rjmp	.+40     	; 0x31b0 <main+0x123a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3188:	69 a9       	ldd	r22, Y+49	; 0x31
    318a:	7a a9       	ldd	r23, Y+50	; 0x32
    318c:	8b a9       	ldd	r24, Y+51	; 0x33
    318e:	9c a9       	ldd	r25, Y+52	; 0x34
    3190:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	98 ab       	std	Y+48, r25	; 0x30
    319a:	8f a7       	std	Y+47, r24	; 0x2f
    319c:	8f a5       	ldd	r24, Y+47	; 0x2f
    319e:	98 a9       	ldd	r25, Y+48	; 0x30
    31a0:	9c a7       	std	Y+44, r25	; 0x2c
    31a2:	8b a7       	std	Y+43, r24	; 0x2b
    31a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    31a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	f1 f7       	brne	.-4      	; 0x31a8 <main+0x1232>
    31ac:	9c a7       	std	Y+44, r25	; 0x2c
    31ae:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(35);
				}

				if(key_Pressed == 0){
    31b0:	fe 01       	movw	r30, r28
    31b2:	e9 53       	subi	r30, 0x39	; 57
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	80 81       	ld	r24, Z
    31b8:	88 23       	and	r24, r24
    31ba:	09 f0       	breq	.+2      	; 0x31be <main+0x1248>
    31bc:	8c c0       	rjmp	.+280    	; 0x32d6 <main+0x1360>
					LCD_displayCharacter('*');
    31be:	8a e2       	ldi	r24, 0x2A	; 42
    31c0:	0e 94 1f 09 	call	0x123e	; 0x123e <LCD_displayCharacter>
					pressed_Keys[c] = '0';
    31c4:	fe 01       	movw	r30, r28
    31c6:	e7 53       	subi	r30, 0x37	; 55
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	80 81       	ld	r24, Z
    31cc:	28 2f       	mov	r18, r24
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	ce 01       	movw	r24, r28
    31d2:	85 53       	subi	r24, 0x35	; 53
    31d4:	9f 4f       	sbci	r25, 0xFF	; 255
    31d6:	fc 01       	movw	r30, r24
    31d8:	e2 0f       	add	r30, r18
    31da:	f3 1f       	adc	r31, r19
    31dc:	80 e3       	ldi	r24, 0x30	; 48
    31de:	80 83       	st	Z, r24
					c++;
    31e0:	de 01       	movw	r26, r28
    31e2:	a7 53       	subi	r26, 0x37	; 55
    31e4:	bf 4f       	sbci	r27, 0xFF	; 255
    31e6:	fe 01       	movw	r30, r28
    31e8:	e7 53       	subi	r30, 0x37	; 55
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	80 81       	ld	r24, Z
    31ee:	8f 5f       	subi	r24, 0xFF	; 255
    31f0:	8c 93       	st	X, r24
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	ac e0       	ldi	r26, 0x0C	; 12
    31f8:	b2 e4       	ldi	r27, 0x42	; 66
    31fa:	8f a3       	std	Y+39, r24	; 0x27
    31fc:	98 a7       	std	Y+40, r25	; 0x28
    31fe:	a9 a7       	std	Y+41, r26	; 0x29
    3200:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3202:	6f a1       	ldd	r22, Y+39	; 0x27
    3204:	78 a5       	ldd	r23, Y+40	; 0x28
    3206:	89 a5       	ldd	r24, Y+41	; 0x29
    3208:	9a a5       	ldd	r25, Y+42	; 0x2a
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	4a ef       	ldi	r20, 0xFA	; 250
    3210:	54 e4       	ldi	r21, 0x44	; 68
    3212:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	8b a3       	std	Y+35, r24	; 0x23
    321c:	9c a3       	std	Y+36, r25	; 0x24
    321e:	ad a3       	std	Y+37, r26	; 0x25
    3220:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3222:	6b a1       	ldd	r22, Y+35	; 0x23
    3224:	7c a1       	ldd	r23, Y+36	; 0x24
    3226:	8d a1       	ldd	r24, Y+37	; 0x25
    3228:	9e a1       	ldd	r25, Y+38	; 0x26
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e8       	ldi	r20, 0x80	; 128
    3230:	5f e3       	ldi	r21, 0x3F	; 63
    3232:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3236:	88 23       	and	r24, r24
    3238:	2c f4       	brge	.+10     	; 0x3244 <main+0x12ce>
		__ticks = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9a a3       	std	Y+34, r25	; 0x22
    3240:	89 a3       	std	Y+33, r24	; 0x21
    3242:	3f c0       	rjmp	.+126    	; 0x32c2 <main+0x134c>
	else if (__tmp > 65535)
    3244:	6b a1       	ldd	r22, Y+35	; 0x23
    3246:	7c a1       	ldd	r23, Y+36	; 0x24
    3248:	8d a1       	ldd	r24, Y+37	; 0x25
    324a:	9e a1       	ldd	r25, Y+38	; 0x26
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	3f ef       	ldi	r19, 0xFF	; 255
    3250:	4f e7       	ldi	r20, 0x7F	; 127
    3252:	57 e4       	ldi	r21, 0x47	; 71
    3254:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3258:	18 16       	cp	r1, r24
    325a:	4c f5       	brge	.+82     	; 0x32ae <main+0x1338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325c:	6f a1       	ldd	r22, Y+39	; 0x27
    325e:	78 a5       	ldd	r23, Y+40	; 0x28
    3260:	89 a5       	ldd	r24, Y+41	; 0x29
    3262:	9a a5       	ldd	r25, Y+42	; 0x2a
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e2       	ldi	r20, 0x20	; 32
    326a:	51 e4       	ldi	r21, 0x41	; 65
    326c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	bc 01       	movw	r22, r24
    3276:	cd 01       	movw	r24, r26
    3278:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	9a a3       	std	Y+34, r25	; 0x22
    3282:	89 a3       	std	Y+33, r24	; 0x21
    3284:	0f c0       	rjmp	.+30     	; 0x32a4 <main+0x132e>
    3286:	88 ec       	ldi	r24, 0xC8	; 200
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	98 a3       	std	Y+32, r25	; 0x20
    328c:	8f 8f       	std	Y+31, r24	; 0x1f
    328e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3290:	98 a1       	ldd	r25, Y+32	; 0x20
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <main+0x131c>
    3296:	98 a3       	std	Y+32, r25	; 0x20
    3298:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329a:	89 a1       	ldd	r24, Y+33	; 0x21
    329c:	9a a1       	ldd	r25, Y+34	; 0x22
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	9a a3       	std	Y+34, r25	; 0x22
    32a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a4:	89 a1       	ldd	r24, Y+33	; 0x21
    32a6:	9a a1       	ldd	r25, Y+34	; 0x22
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	69 f7       	brne	.-38     	; 0x3286 <main+0x1310>
    32ac:	14 c0       	rjmp	.+40     	; 0x32d6 <main+0x1360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ae:	6b a1       	ldd	r22, Y+35	; 0x23
    32b0:	7c a1       	ldd	r23, Y+36	; 0x24
    32b2:	8d a1       	ldd	r24, Y+37	; 0x25
    32b4:	9e a1       	ldd	r25, Y+38	; 0x26
    32b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9a a3       	std	Y+34, r25	; 0x22
    32c0:	89 a3       	std	Y+33, r24	; 0x21
    32c2:	89 a1       	ldd	r24, Y+33	; 0x21
    32c4:	9a a1       	ldd	r25, Y+34	; 0x22
    32c6:	9e 8f       	std	Y+30, r25	; 0x1e
    32c8:	8d 8f       	std	Y+29, r24	; 0x1d
    32ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <main+0x1358>
    32d2:	9e 8f       	std	Y+30, r25	; 0x1e
    32d4:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(35);
				}

				if(key_Pressed == '#'){
    32d6:	fe 01       	movw	r30, r28
    32d8:	e9 53       	subi	r30, 0x39	; 57
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	80 81       	ld	r24, Z
    32de:	83 32       	cpi	r24, 0x23	; 35
    32e0:	09 f0       	breq	.+2      	; 0x32e4 <main+0x136e>
    32e2:	8c c0       	rjmp	.+280    	; 0x33fc <main+0x1486>
					LCD_displayCharacter('*');
    32e4:	8a e2       	ldi	r24, 0x2A	; 42
    32e6:	0e 94 1f 09 	call	0x123e	; 0x123e <LCD_displayCharacter>
					pressed_Keys[c] = '#';
    32ea:	fe 01       	movw	r30, r28
    32ec:	e7 53       	subi	r30, 0x37	; 55
    32ee:	ff 4f       	sbci	r31, 0xFF	; 255
    32f0:	80 81       	ld	r24, Z
    32f2:	28 2f       	mov	r18, r24
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	ce 01       	movw	r24, r28
    32f8:	85 53       	subi	r24, 0x35	; 53
    32fa:	9f 4f       	sbci	r25, 0xFF	; 255
    32fc:	fc 01       	movw	r30, r24
    32fe:	e2 0f       	add	r30, r18
    3300:	f3 1f       	adc	r31, r19
    3302:	83 e2       	ldi	r24, 0x23	; 35
    3304:	80 83       	st	Z, r24
					c++;
    3306:	de 01       	movw	r26, r28
    3308:	a7 53       	subi	r26, 0x37	; 55
    330a:	bf 4f       	sbci	r27, 0xFF	; 255
    330c:	fe 01       	movw	r30, r28
    330e:	e7 53       	subi	r30, 0x37	; 55
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	80 81       	ld	r24, Z
    3314:	8f 5f       	subi	r24, 0xFF	; 255
    3316:	8c 93       	st	X, r24
    3318:	80 e0       	ldi	r24, 0x00	; 0
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	ac e0       	ldi	r26, 0x0C	; 12
    331e:	b2 e4       	ldi	r27, 0x42	; 66
    3320:	89 8f       	std	Y+25, r24	; 0x19
    3322:	9a 8f       	std	Y+26, r25	; 0x1a
    3324:	ab 8f       	std	Y+27, r26	; 0x1b
    3326:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3328:	69 8d       	ldd	r22, Y+25	; 0x19
    332a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    332c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    332e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	4a ef       	ldi	r20, 0xFA	; 250
    3336:	54 e4       	ldi	r21, 0x44	; 68
    3338:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	8d 8b       	std	Y+21, r24	; 0x15
    3342:	9e 8b       	std	Y+22, r25	; 0x16
    3344:	af 8b       	std	Y+23, r26	; 0x17
    3346:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3348:	6d 89       	ldd	r22, Y+21	; 0x15
    334a:	7e 89       	ldd	r23, Y+22	; 0x16
    334c:	8f 89       	ldd	r24, Y+23	; 0x17
    334e:	98 8d       	ldd	r25, Y+24	; 0x18
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	40 e8       	ldi	r20, 0x80	; 128
    3356:	5f e3       	ldi	r21, 0x3F	; 63
    3358:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    335c:	88 23       	and	r24, r24
    335e:	2c f4       	brge	.+10     	; 0x336a <main+0x13f4>
		__ticks = 1;
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	9c 8b       	std	Y+20, r25	; 0x14
    3366:	8b 8b       	std	Y+19, r24	; 0x13
    3368:	3f c0       	rjmp	.+126    	; 0x33e8 <main+0x1472>
	else if (__tmp > 65535)
    336a:	6d 89       	ldd	r22, Y+21	; 0x15
    336c:	7e 89       	ldd	r23, Y+22	; 0x16
    336e:	8f 89       	ldd	r24, Y+23	; 0x17
    3370:	98 8d       	ldd	r25, Y+24	; 0x18
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	3f ef       	ldi	r19, 0xFF	; 255
    3376:	4f e7       	ldi	r20, 0x7F	; 127
    3378:	57 e4       	ldi	r21, 0x47	; 71
    337a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    337e:	18 16       	cp	r1, r24
    3380:	4c f5       	brge	.+82     	; 0x33d4 <main+0x145e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3382:	69 8d       	ldd	r22, Y+25	; 0x19
    3384:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	40 e2       	ldi	r20, 0x20	; 32
    3390:	51 e4       	ldi	r21, 0x41	; 65
    3392:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	bc 01       	movw	r22, r24
    339c:	cd 01       	movw	r24, r26
    339e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	9c 8b       	std	Y+20, r25	; 0x14
    33a8:	8b 8b       	std	Y+19, r24	; 0x13
    33aa:	0f c0       	rjmp	.+30     	; 0x33ca <main+0x1454>
    33ac:	88 ec       	ldi	r24, 0xC8	; 200
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	9a 8b       	std	Y+18, r25	; 0x12
    33b2:	89 8b       	std	Y+17, r24	; 0x11
    33b4:	89 89       	ldd	r24, Y+17	; 0x11
    33b6:	9a 89       	ldd	r25, Y+18	; 0x12
    33b8:	01 97       	sbiw	r24, 0x01	; 1
    33ba:	f1 f7       	brne	.-4      	; 0x33b8 <main+0x1442>
    33bc:	9a 8b       	std	Y+18, r25	; 0x12
    33be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c0:	8b 89       	ldd	r24, Y+19	; 0x13
    33c2:	9c 89       	ldd	r25, Y+20	; 0x14
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	9c 8b       	std	Y+20, r25	; 0x14
    33c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ca:	8b 89       	ldd	r24, Y+19	; 0x13
    33cc:	9c 89       	ldd	r25, Y+20	; 0x14
    33ce:	00 97       	sbiw	r24, 0x00	; 0
    33d0:	69 f7       	brne	.-38     	; 0x33ac <main+0x1436>
    33d2:	14 c0       	rjmp	.+40     	; 0x33fc <main+0x1486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d4:	6d 89       	ldd	r22, Y+21	; 0x15
    33d6:	7e 89       	ldd	r23, Y+22	; 0x16
    33d8:	8f 89       	ldd	r24, Y+23	; 0x17
    33da:	98 8d       	ldd	r25, Y+24	; 0x18
    33dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	9c 8b       	std	Y+20, r25	; 0x14
    33e6:	8b 8b       	std	Y+19, r24	; 0x13
    33e8:	8b 89       	ldd	r24, Y+19	; 0x13
    33ea:	9c 89       	ldd	r25, Y+20	; 0x14
    33ec:	98 8b       	std	Y+16, r25	; 0x10
    33ee:	8f 87       	std	Y+15, r24	; 0x0f
    33f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33f2:	98 89       	ldd	r25, Y+16	; 0x10
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <main+0x147e>
    33f8:	98 8b       	std	Y+16, r25	; 0x10
    33fa:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(35);
				}

				if(c == 6){
    33fc:	fe 01       	movw	r30, r28
    33fe:	e7 53       	subi	r30, 0x37	; 55
    3400:	ff 4f       	sbci	r31, 0xFF	; 255
    3402:	80 81       	ld	r24, Z
    3404:	86 30       	cpi	r24, 0x06	; 6
    3406:	11 f0       	breq	.+4      	; 0x340c <main+0x1496>
    3408:	0c 94 3d 10 	jmp	0x207a	; 0x207a <main+0x104>
					for(int i = 0; i < 5; i++){
    340c:	fe 01       	movw	r30, r28
    340e:	eb 53       	subi	r30, 0x3B	; 59
    3410:	ff 4f       	sbci	r31, 0xFF	; 255
    3412:	11 82       	std	Z+1, r1	; 0x01
    3414:	10 82       	st	Z, r1
    3416:	fe 01       	movw	r30, r28
    3418:	eb 53       	subi	r30, 0x3B	; 59
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	80 81       	ld	r24, Z
    341e:	91 81       	ldd	r25, Z+1	; 0x01
    3420:	85 30       	cpi	r24, 0x05	; 5
    3422:	91 05       	cpc	r25, r1
    3424:	14 f0       	brlt	.+4      	; 0x342a <main+0x14b4>
    3426:	0c 94 3d 10 	jmp	0x207a	; 0x207a <main+0x104>
						if(pressed_Keys[i] == pass[i]){
    342a:	fe 01       	movw	r30, r28
    342c:	eb 53       	subi	r30, 0x3B	; 59
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	20 81       	ld	r18, Z
    3432:	31 81       	ldd	r19, Z+1	; 0x01
    3434:	ce 01       	movw	r24, r28
    3436:	85 53       	subi	r24, 0x35	; 53
    3438:	9f 4f       	sbci	r25, 0xFF	; 255
    343a:	fc 01       	movw	r30, r24
    343c:	e2 0f       	add	r30, r18
    343e:	f3 1f       	adc	r31, r19
    3440:	40 81       	ld	r20, Z
    3442:	fe 01       	movw	r30, r28
    3444:	eb 53       	subi	r30, 0x3B	; 59
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	20 81       	ld	r18, Z
    344a:	31 81       	ldd	r19, Z+1	; 0x01
    344c:	ce 01       	movw	r24, r28
    344e:	8b 52       	subi	r24, 0x2B	; 43
    3450:	9f 4f       	sbci	r25, 0xFF	; 255
    3452:	fc 01       	movw	r30, r24
    3454:	e2 0f       	add	r30, r18
    3456:	f3 1f       	adc	r31, r19
    3458:	80 81       	ld	r24, Z
    345a:	48 17       	cp	r20, r24
    345c:	09 f0       	breq	.+2      	; 0x3460 <main+0x14ea>
    345e:	80 c0       	rjmp	.+256    	; 0x3560 <main+0x15ea>
							CLCD_voidClear();
    3460:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidClear>
							CLCD_voidSendString("Correct Password");
    3464:	80 e6       	ldi	r24, 0x60	; 96
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	0e 94 ce 08 	call	0x119c	; 0x119c <CLCD_voidSendString>
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	ac e0       	ldi	r26, 0x0C	; 12
    3472:	b2 e4       	ldi	r27, 0x42	; 66
    3474:	8b 87       	std	Y+11, r24	; 0x0b
    3476:	9c 87       	std	Y+12, r25	; 0x0c
    3478:	ad 87       	std	Y+13, r26	; 0x0d
    347a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347c:	6b 85       	ldd	r22, Y+11	; 0x0b
    347e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3480:	8d 85       	ldd	r24, Y+13	; 0x0d
    3482:	9e 85       	ldd	r25, Y+14	; 0x0e
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	4a ef       	ldi	r20, 0xFA	; 250
    348a:	54 e4       	ldi	r21, 0x44	; 68
    348c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	8f 83       	std	Y+7, r24	; 0x07
    3496:	98 87       	std	Y+8, r25	; 0x08
    3498:	a9 87       	std	Y+9, r26	; 0x09
    349a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    349c:	6f 81       	ldd	r22, Y+7	; 0x07
    349e:	78 85       	ldd	r23, Y+8	; 0x08
    34a0:	89 85       	ldd	r24, Y+9	; 0x09
    34a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e8       	ldi	r20, 0x80	; 128
    34aa:	5f e3       	ldi	r21, 0x3F	; 63
    34ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    34b0:	88 23       	and	r24, r24
    34b2:	2c f4       	brge	.+10     	; 0x34be <main+0x1548>
		__ticks = 1;
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	9e 83       	std	Y+6, r25	; 0x06
    34ba:	8d 83       	std	Y+5, r24	; 0x05
    34bc:	3f c0       	rjmp	.+126    	; 0x353c <main+0x15c6>
	else if (__tmp > 65535)
    34be:	6f 81       	ldd	r22, Y+7	; 0x07
    34c0:	78 85       	ldd	r23, Y+8	; 0x08
    34c2:	89 85       	ldd	r24, Y+9	; 0x09
    34c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	3f ef       	ldi	r19, 0xFF	; 255
    34ca:	4f e7       	ldi	r20, 0x7F	; 127
    34cc:	57 e4       	ldi	r21, 0x47	; 71
    34ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    34d2:	18 16       	cp	r1, r24
    34d4:	4c f5       	brge	.+82     	; 0x3528 <main+0x15b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34da:	8d 85       	ldd	r24, Y+13	; 0x0d
    34dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e2       	ldi	r20, 0x20	; 32
    34e4:	51 e4       	ldi	r21, 0x41	; 65
    34e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	bc 01       	movw	r22, r24
    34f0:	cd 01       	movw	r24, r26
    34f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
    34fe:	0f c0       	rjmp	.+30     	; 0x351e <main+0x15a8>
    3500:	88 ec       	ldi	r24, 0xC8	; 200
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	9c 83       	std	Y+4, r25	; 0x04
    3506:	8b 83       	std	Y+3, r24	; 0x03
    3508:	8b 81       	ldd	r24, Y+3	; 0x03
    350a:	9c 81       	ldd	r25, Y+4	; 0x04
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	f1 f7       	brne	.-4      	; 0x350c <main+0x1596>
    3510:	9c 83       	std	Y+4, r25	; 0x04
    3512:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3514:	8d 81       	ldd	r24, Y+5	; 0x05
    3516:	9e 81       	ldd	r25, Y+6	; 0x06
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	9e 83       	std	Y+6, r25	; 0x06
    351c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    351e:	8d 81       	ldd	r24, Y+5	; 0x05
    3520:	9e 81       	ldd	r25, Y+6	; 0x06
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	69 f7       	brne	.-38     	; 0x3500 <main+0x158a>
    3526:	14 c0       	rjmp	.+40     	; 0x3550 <main+0x15da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3528:	6f 81       	ldd	r22, Y+7	; 0x07
    352a:	78 85       	ldd	r23, Y+8	; 0x08
    352c:	89 85       	ldd	r24, Y+9	; 0x09
    352e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3530:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	9e 83       	std	Y+6, r25	; 0x06
    353a:	8d 83       	std	Y+5, r24	; 0x05
    353c:	8d 81       	ldd	r24, Y+5	; 0x05
    353e:	9e 81       	ldd	r25, Y+6	; 0x06
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	9a 81       	ldd	r25, Y+2	; 0x02
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <main+0x15d2>
    354c:	9a 83       	std	Y+2, r25	; 0x02
    354e:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(35);
							CLCD_voidClear();
    3550:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidClear>
							CLCD_voidSendString("welcome");
    3554:	81 e7       	ldi	r24, 0x71	; 113
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0e 94 ce 08 	call	0x119c	; 0x119c <CLCD_voidSendString>
    355c:	0c 94 3d 10 	jmp	0x207a	; 0x207a <main+0x104>
							break;
						}
						else{
							CLCD_voidClear();
    3560:	0e 94 15 09 	call	0x122a	; 0x122a <CLCD_voidClear>
							CLCD_voidSendString("wrong pass");
    3564:	89 e7       	ldi	r24, 0x79	; 121
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	0e 94 ce 08 	call	0x119c	; 0x119c <CLCD_voidSendString>
    356c:	0c 94 3d 10 	jmp	0x207a	; 0x207a <main+0x104>

00003570 <__udivmodsi4>:
    3570:	a1 e2       	ldi	r26, 0x21	; 33
    3572:	1a 2e       	mov	r1, r26
    3574:	aa 1b       	sub	r26, r26
    3576:	bb 1b       	sub	r27, r27
    3578:	fd 01       	movw	r30, r26
    357a:	0d c0       	rjmp	.+26     	; 0x3596 <__udivmodsi4_ep>

0000357c <__udivmodsi4_loop>:
    357c:	aa 1f       	adc	r26, r26
    357e:	bb 1f       	adc	r27, r27
    3580:	ee 1f       	adc	r30, r30
    3582:	ff 1f       	adc	r31, r31
    3584:	a2 17       	cp	r26, r18
    3586:	b3 07       	cpc	r27, r19
    3588:	e4 07       	cpc	r30, r20
    358a:	f5 07       	cpc	r31, r21
    358c:	20 f0       	brcs	.+8      	; 0x3596 <__udivmodsi4_ep>
    358e:	a2 1b       	sub	r26, r18
    3590:	b3 0b       	sbc	r27, r19
    3592:	e4 0b       	sbc	r30, r20
    3594:	f5 0b       	sbc	r31, r21

00003596 <__udivmodsi4_ep>:
    3596:	66 1f       	adc	r22, r22
    3598:	77 1f       	adc	r23, r23
    359a:	88 1f       	adc	r24, r24
    359c:	99 1f       	adc	r25, r25
    359e:	1a 94       	dec	r1
    35a0:	69 f7       	brne	.-38     	; 0x357c <__udivmodsi4_loop>
    35a2:	60 95       	com	r22
    35a4:	70 95       	com	r23
    35a6:	80 95       	com	r24
    35a8:	90 95       	com	r25
    35aa:	9b 01       	movw	r18, r22
    35ac:	ac 01       	movw	r20, r24
    35ae:	bd 01       	movw	r22, r26
    35b0:	cf 01       	movw	r24, r30
    35b2:	08 95       	ret

000035b4 <__prologue_saves__>:
    35b4:	2f 92       	push	r2
    35b6:	3f 92       	push	r3
    35b8:	4f 92       	push	r4
    35ba:	5f 92       	push	r5
    35bc:	6f 92       	push	r6
    35be:	7f 92       	push	r7
    35c0:	8f 92       	push	r8
    35c2:	9f 92       	push	r9
    35c4:	af 92       	push	r10
    35c6:	bf 92       	push	r11
    35c8:	cf 92       	push	r12
    35ca:	df 92       	push	r13
    35cc:	ef 92       	push	r14
    35ce:	ff 92       	push	r15
    35d0:	0f 93       	push	r16
    35d2:	1f 93       	push	r17
    35d4:	cf 93       	push	r28
    35d6:	df 93       	push	r29
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
    35dc:	ca 1b       	sub	r28, r26
    35de:	db 0b       	sbc	r29, r27
    35e0:	0f b6       	in	r0, 0x3f	; 63
    35e2:	f8 94       	cli
    35e4:	de bf       	out	0x3e, r29	; 62
    35e6:	0f be       	out	0x3f, r0	; 63
    35e8:	cd bf       	out	0x3d, r28	; 61
    35ea:	09 94       	ijmp

000035ec <__epilogue_restores__>:
    35ec:	2a 88       	ldd	r2, Y+18	; 0x12
    35ee:	39 88       	ldd	r3, Y+17	; 0x11
    35f0:	48 88       	ldd	r4, Y+16	; 0x10
    35f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    35f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    35f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    35f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    35fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    35fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    35fe:	b9 84       	ldd	r11, Y+9	; 0x09
    3600:	c8 84       	ldd	r12, Y+8	; 0x08
    3602:	df 80       	ldd	r13, Y+7	; 0x07
    3604:	ee 80       	ldd	r14, Y+6	; 0x06
    3606:	fd 80       	ldd	r15, Y+5	; 0x05
    3608:	0c 81       	ldd	r16, Y+4	; 0x04
    360a:	1b 81       	ldd	r17, Y+3	; 0x03
    360c:	aa 81       	ldd	r26, Y+2	; 0x02
    360e:	b9 81       	ldd	r27, Y+1	; 0x01
    3610:	ce 0f       	add	r28, r30
    3612:	d1 1d       	adc	r29, r1
    3614:	0f b6       	in	r0, 0x3f	; 63
    3616:	f8 94       	cli
    3618:	de bf       	out	0x3e, r29	; 62
    361a:	0f be       	out	0x3f, r0	; 63
    361c:	cd bf       	out	0x3d, r28	; 61
    361e:	ed 01       	movw	r28, r26
    3620:	08 95       	ret

00003622 <_exit>:
    3622:	f8 94       	cli

00003624 <__stop_program>:
    3624:	ff cf       	rjmp	.-2      	; 0x3624 <__stop_program>
